f <- f + (frequencies[[l]][[c]] - 1) / (sum(frequencies[[l]]) - 2)
}
}
}
ir[i] <- (2 * H - f) / (2 * N - f)
}
ir
}
ir(genotypes[,1:2])
Dat_test <- genotypes[,1:2]
View(Dat_test)
Dat_test <- genotypes[,1]
Dat_test <- genotypes[,1:2]
Dat_test[,1] <- 1
Dat_test[,1] <- 0
Dat_test[,1] <- 1
Dat_test[,2] <- 0
frequencies[[l]]
frequencies[[2]]
frequencies[[3]]
View(genotypes)
l = 2
c <- as.character(genotypes[i, g])
frequencies[[l]]
i = 2
genotypes[i, g]
l = 2
genotypes[i, g]
frequencies[[2]]
frequencies[[2]][[T]]
frequencies[[2]][["T"]]
c = "T"
l = 2
(2 * frequencies[[l]][[c]] - 2) / (sum(frequencies[[l]]) - 2)
ir(genotypes[,1:3])
ir(genotypes[,1:4])
ir(genotypes[,3:4])
# Calculate the frequencies of each allele
p <- ((colSums(tmp[3:ncol(tmp)]== 0, na.rm = T)*2) + colSums(tmp[3:ncol(tmp)]== 1, na.rm = T))/((nrow(tmp)- colSums(is.na(tmp[3:ncol(tmp)])))*2)
q <- ((colSums(tmp[3:ncol(tmp)]== 2, na.rm = T)*2) + colSums(tmp[3:ncol(tmp)]== 1, na.rm = T))/((nrow(tmp)- colSums(is.na(tmp[3:ncol(tmp)])))*2)
# Calculate the frequencies of each allele
p <- ((colSums(tmp == 0, na.rm = T)*2) + colSums(tmp == 1, na.rm = T))/((nrow(tmp)- colSums(is.na(tmp)))*2)
q <- ((colSums(tmp == 2, na.rm = T)*2) + colSums(tmp == 1, na.rm = T))/((nrow(tmp)- colSums(is.na(tmp)))*2)
View(tmp)
IR_p <- ((2*H)-sum(p))/((2*N)-sum(p))
View(Dat_test)
res_tab[i] <- IR_p
View(res_tab)
res_tab[i,1] <- IR_p
# Set up a results table
res_tab <- data.frame(IR = matrix(NA, nrow = 17, ncol = 1), row.names = Dat[,1])
View(genotypes)
genotypes <- as.data.frame(genotypes)
genotypes <- as.matrix(genotypes)
individuals <- nrow(genotypes)
loci <- ncol(genotypes) / 2
ir <- array(NA, dim=c(individuals, 1))
frequencies <- array()
for (l in 1:loci) {
g <- 2 * l - 1
h <- 2 * l
frequencies[l] <- list(table(genotypes[, g:h]))
}
View(frequencies)
frequencies[[1]]
i = 1
l = 1
H <- 0
N <- 0
f <- 0
g <- 2 * l - 1 # Get the first position for example Loc1a
h <- 2 * l # Get the second position, for example, Loc1b
View(genotypes)
# Record the first allele
c <- as.character(genotypes[i, g])
frequencies[[l]][[c]]
View(frequencies)
frequencies[[1]]
View(genotypes)
sum(frequencies[[l]])
# Calculate f at first allele for locus
f <- f + (frequencies[[l]][[c]] - 1) / (sum(frequencies[[l]]) - 2)
# Record second allele
c <- as.character(genotypes[i, h])
# Calculate f at second allele
f <- f + (frequencies[[l]][[c]] - 1) / (sum(frequencies[[l]]) - 2)
(2 * H - f) / (2 * N - f)
ir(genotypes)
`ir` <-
function(genotypes) {
genotypes <- as.data.frame(genotypes)
genotypes <- as.matrix(genotypes)
individuals <- nrow(genotypes)
loci <- ncol(genotypes) / 2
ir <- array(NA, dim=c(individuals, 1))
frequencies <- array()
for (l in 1:loci) {
g <- 2 * l - 1
h <- 2 * l
frequencies[l] <- list(table(genotypes[, g:h]))
}
for (i in 1:individuals) {
H <- 0
N <- 0
f <- 0
for (l in 1:loci) {
g <- 2 * l - 1 # Get the first position for example Loc1a
h <- 2 * l # Get the second position, for example, Loc1b
# If they aren't missing data
if ((!is.na(genotypes[i, g])) && (!is.na(genotypes[i, h]))) {
N <- N + 1
# If the locus is homozygous
if (genotypes[i, g] == genotypes[i, h]) {
# Add 1 to the homozygous counter
H <- H + 1
# Record allele name
c <- as.character(genotypes[i, g])
# Calculate the frequency of the allele (2*count of an allele at a locus - 2)/(the number of alleles - 2)
f <- f + (2 * frequencies[[l]][[c]] - 2) / (sum(frequencies[[l]]) - 2)
}
# If the locus is heterozygous
else {
# Record the first allele
c <- as.character(genotypes[i, g])
# Calculate f at first allele for locus
f <- f + (frequencies[[l]][[c]] - 1) / (sum(frequencies[[l]]) - 2)
# Record second allele
c <- as.character(genotypes[i, h])
# Calculate f at second allele
f <- f + (frequencies[[l]][[c]] - 1) / (sum(frequencies[[l]]) - 2)
}
}
}
ir[i] <- (2 * H - f) / (2 * N - f)
}
ir
}
ir(genotypes[,1:2])
ir(genotypes[,3:4])
ir(genotypes[,8:9])
View(gt)
Dat <- HornedLizard_VCF
test <- vcfR::extract.gt(Dat, return.alleles = T)
View(test)
View(tmp)
Dat <- Dat_perpop[[1]]
View(Dat)
genotypes <- as.data.frame(genotypes)
genotypes <- as.matrix(genotypes)
individuals <- nrow(genotypes)
loci <- ncol(genotypes) / 2
hl <- array(NA, dim=c(individuals, 1))
E <- array(loci)
frequencies <- array(loci)
E[l] <- 1
g <- 2 * l - 1
h <- 2 * l
frequencies[l] <- list(table(genotypes[, g:h]))
E[l] <- 1 - sum((frequencies[[l]] / sum(frequencies[[l]]))^2)
table(Dat[,1])
table(Dat[,3])
# Get the counts of alleles for each locus
Counts <- list()
length(3:ncol(Dat))
# Get the number of loci
Nloc <- length(3:ncol(Dat))
# Isolate the genetic data
tmp_dat <- Dat[,3:ncol(Dat)]
table(tmp_dat)
View(tmp_dat)
tmp_loc <- tmp_dat[,i]
table(tmp_loc)
for(i in 1:Nloc) {
tmp_loc <- tmp_dat[,i]
Counts[[i]] <- table(tmp_loc)
}
View(Counts)
Counts[[1]]
View(frequencies)
frequencies[[1]]
# Get the counts of alleles for each locus
Counts <- list()
# Isolate the genetic data
tmp_dat <- Dat[,3:ncol(Dat)]
for(i in 1:Nloc) {
tmp_loc <- tmp_dat[,i]
Counts[[i]] <- list(table(tmp_loc))
}
View(Counts)
Counts[[1]][[1]]
Counts <- list()
# Isolate the genetic data
tmp_dat <- Dat[,3:ncol(Dat)]
for(i in 1:Nloc) {
tmp_loc <- tmp_dat[,i]
Counts[[i]] <- table(tmp_loc)
}
View(Counts)
H <- c()
Dat[i,ncol(tmp) - length(which(is.na(tmp)))]
i = 1
Dat[i,ncol(tmp) - length(which(is.na(tmp)))]
View(Dat)
Dat[i,ncol(tmp) - 3:length(which(is.na(tmp)))]
Dat[i,ncol(Dat) - 3:length(which(is.na(Dat)))]
View(genotypes)
genotypes <- as.data.frame(genotypes)
genotypes <- as.matrix(genotypes)
individuals <- nrow(genotypes)
loci <- ncol(genotypes) / 2
ir <- array(NA, dim=c(individuals, 1))
frequencies <- array()
for (l in 1:loci) {
g <- 2 * l - 1
h <- 2 * l
frequencies[l] <- list(table(genotypes[, g:h]))
}
View(frequencies)
i = 2
l = 2
genotypes[i, g] == genotypes[i, h]
c <- as.character(genotypes[i, g])
c = "T"
frequencies[[l]]
frequencies[[l]][[c]]
tmp <- tmp_dat
View(tmp)
tmp[i,j]
j = 1
tmp[i,j]
# Which allele is the individual homozygous for
Hom_Allele <- tmp[i,j]
Counts[[j]]
Counts[[j]][[Hom_Allele]]
Counts[[j]][[0]]
# Isolate the genetic data
tmp <- Dat[,3:ncol(Dat)]
# Count the occurrences of 0,1,2 at each locus
for(i in 1:Nloc) {
tmp_loc <- tmp[,i]
Counts[[i]] <- list(table(tmp_loc))
}
Counts[[j]][[Hom_Allele]]
View(Counts)
Counts[[1]]
names(Counts[[1]])
table(tmp_loc[i])
table(tmp_loc[1])
table(tmp[1])
test <- data.frame(table(tmp[1]))
View(test)
test <- table(tmp[1])
test
Counts[[j]][[Hom_Allele]]
Counts[[j]][["0"]]
Counts[[j]][[Hom_Allele]]
# Which allele is the individual homozygous for
Hom_Allele <- as.character(tmp[i,j])
# Which allele is the individual homozygous for
Hom_Allele <- tmp[i,j]
View(tmp)
i = 1
j = 1
Hom_Allele <- tmp[i,j]
Hom_Allele <- as.character(tmp[i,j])
Counts[[j]][[Hom_Allele]]
Counts[[j]][[1]]
# Count the occurrences of 0,1,2 at each locus
for(i in 1:Nloc) {
tmp_loc <- tmp[,i]
Counts[[i]] <- table(tmp_loc)
}
Counts[[j]][[Hom_Allele]]
Counts[[j]][[Hom_Allele]] - 2)/(sum(Counts[[j]]) - 2)
(2 * Counts[[j]][[Hom_Allele]] - 2)/(sum(Counts[[j]]) - 2)
IR <- function(Dat){
# Get the number of individuals
Individuals <- nrow(Dat)
# Get the number of loci
Nloc <- length(3:ncol(Dat))
# Set up a results table
res_tab <- data.frame(IR = matrix(NA, nrow = 17, ncol = 1), row.names = Dat[,1])
# Get the counts of alleles for each locus
Counts <- list()
# Isolate the genetic data
tmp <- Dat[,3:ncol(Dat)]
# Count the occurrences of 0,1,2 at each locus
for(i in 1:Nloc) {
tmp_loc <- tmp[,i]
Counts[[i]] <- table(tmp_loc)
}
### Calculate IR for each individual
for(i in 1:Individuals){
# Need to work on H, N, f
H <- 0
N <- Nloc
f <- 0
for(j in 1:Nloc){
if(tmp[i,j] == 0 | tmp[i,j] == 2){
H <- H + 1
# Which allele is the individual homozygous for
Hom_Allele <- tmp[i,j]
f <- f + (2 * Counts[[j]][[Hom_Allele]] - 2)/(sum(Counts[[j]]) - 2)
} else if(tmp[i,j] == 1){
Het_Allele <- "1"
f <- f + (Counts[[j]][[Het_Allele]] - 1)/(sum(Counts[[j]]) - 2)
}
}
# Calcualte internal relatedness
res_tab[i,1] <- (2 * H - f) / (2 * N - f)
}
return(res_tab)
}
Test_IR <- IR(Dat)
View(Dat)
IR <- function(Dat){
# Get the number of individuals
Individuals <- nrow(Dat)
# Get the number of loci
Nloc <- length(3:ncol(Dat))
# Set up a results table
res_tab <- data.frame(IR = matrix(NA, nrow = 17, ncol = 1), row.names = Dat[,1])
# Get the counts of alleles for each locus
Counts <- list()
# Isolate the genetic data
tmp <- Dat[,3:ncol(Dat)]
# Count the occurrences of 0,1,2 at each locus
for(i in 1:Nloc) {
tmp_loc <- tmp[,i]
Counts[[i]] <- table(tmp_loc)
}
### Calculate IR for each individual
for(i in 1:Individuals){
# Need to work on H, N, f
H <- 0
N <- Nloc
f <- 0
for(j in 1:Nloc){
if(tmp[i,j] == 0 | tmp[i,j] == 2){
H <- H + 1
# Which allele is the individual homozygous for
Hom_Allele <- as.character(tmp[i,j])
f <- f + (2 * Counts[[j]][[Hom_Allele]] - 2)/(sum(Counts[[j]]) - 2)
} else if(tmp[i,j] == 1){
Het_Allele <- "1"
f <- f + (Counts[[j]][[Het_Allele]] - 1)/(sum(Counts[[j]]) - 2)
}
}
# Calcualte internal relatedness
res_tab[i,1] <- (2 * H - f) / (2 * N - f)
}
return(res_tab)
}
Test_IR <- IR(Dat)
View(Test_IR)
IR(Dat_test)
View(Dat_test)
Dat_test <- cbind(Dat[1:2,], Dat_test)
View(genotypes1)
Dat_test <- cbind(Dat[1:2,1:2], genotypes1)
Dat_test[,3] <- c(0,1)
Dat_test <- Dat_test[1:3]
ir(genotypes1)
ir_DC <-
function(genotypes) {
genotypes <- as.data.frame(genotypes)
genotypes <- as.matrix(genotypes)
individuals <- nrow(genotypes)
loci <- ncol(genotypes) / 2
ir <- array(NA, dim=c(individuals, 1))
frequencies <- array()
for (l in 1:loci) {
g <- 2 * l - 1
h <- 2 * l
frequencies[l] <- list(table(genotypes[, g:h]))
}
for (i in 1:individuals) {
H <- 0
N <- 0
f <- 0
for (l in 1:loci) {
g <- 2 * l - 1 # Get the first position for example Loc1a
h <- 2 * l # Get the second position, for example, Loc1b
# If they aren't missing data
if ((!is.na(genotypes[i, g])) && (!is.na(genotypes[i, h]))) {
N <- N + 1
# If the locus is homozygous
if (genotypes[i, g] == genotypes[i, h]) {
# Add 1 to the homozygous counter
H <- H + 1
# Record allele name
c <- as.character(genotypes[i, g])
# Calculate the frequency of the allele (2*count of an allele at a locus - 2)/(the number of alleles - 2)
f <- f + (2 * frequencies[[l]][[c]] - 2) / (sum(frequencies[[l]]) - 2)
}
# If the locus is heterozygous
else {
# Record the first allele
c <- as.character(genotypes[i, g])
# Calculate f at first allele for locus
f <- f + (frequencies[[l]][[c]] - 1) / (sum(frequencies[[l]]) - 2)
# Record second allele
c <- as.character(genotypes[i, h])
# Calculate f at second allele
f <- f + (frequencies[[l]][[c]] - 1) / (sum(frequencies[[l]]) - 2)
}
}
}
ir[i] <- (2 * H - f) / (2 * N - f)
}
ir
}
ir(genotypes1)
ir_DC(genotypes1)
IR(Dat_test)
View(Dat_test)
IR <- function(Dat){
# Get the number of individuals
Individuals <- nrow(Dat)
# Get the number of loci
Nloc <- length(3:ncol(Dat))
# Set up a results table
res_tab <- data.frame(IR = matrix(NA, nrow = Individuals, ncol = 1), row.names = Dat[,1])
# Get the counts of alleles for each locus
Counts <- list()
# Isolate the genetic data
tmp <- Dat[,3:ncol(Dat)]
# Count the occurrences of 0,1,2 at each locus
for(i in 1:Nloc) {
tmp_loc <- tmp[,i]
Counts[[i]] <- table(tmp_loc)
}
### Calculate IR for each individual
for(i in 1:Individuals){
# Need to work on H, N, f
H <- 0
N <- Nloc
f <- 0
for(j in 1:Nloc){
if(tmp[i,j] == 0 | tmp[i,j] == 2){
H <- H + 1
# Which allele is the individual homozygous for
Hom_Allele <- as.character(tmp[i,j])
f <- f + (2 * Counts[[j]][[Hom_Allele]] - 2)/(sum(Counts[[j]]) - 2)
} else if(tmp[i,j] == 1){
Het_Allele <- "1"
f <- f + (Counts[[j]][[Het_Allele]] - 1)/(sum(Counts[[j]]) - 2)
}
}
# Calcualte internal relatedness
res_tab[i,1] <- (2 * H - f) / (2 * N - f)
}
return(res_tab)
}
IR(Dat_test)
cbind(Dat_test, c(0.0))
cbind(Dat_test, c(0,0))
View(genotypes1)
View(genotypes)
genotypes1 <- cbind(genotypes1, genotypes[,1:2])
Dat_test[,4] <- c(1,1)
View(Dat_test)
IR(Dat_test)
ir_DC(genotypes1)
View(genotypes1)
IR <- function(Dat){
# Get the number of individuals
Individuals <- nrow(Dat)
# Get the number of loci
Nloc <- length(3:ncol(Dat))
# Set up a results table
res_tab <- data.frame(IR = matrix(NA, nrow = Individuals, ncol = 1), row.names = Dat[,1])
# Get the counts of alleles for each locus
Counts <- list()
# Isolate the genetic data
tmp <- Dat[,3:ncol(Dat)]
# Count the occurrences of 0,1,2 at each locus
for(i in 1:Nloc) {
tmp_loc <- tmp[,i]
Counts[[i]] <- table(tmp_loc)
}
### Calculate IR for each individual
for(i in 1:Individuals){
# Need to work on H, N, f
H <- 0
N <- Nloc
f <- 0
for(j in 1:Nloc){
if(tmp[i,j] == 0 | tmp[i,j] == 2){
H <- H + 1
# Which allele is the individual homozygous for
Hom_Allele <- as.character(tmp[i,j])
f <- f + (2 * Counts[[j]][[Hom_Allele]] - 2)/(sum(Counts[[j]]) - 2)
} else if(tmp[i,j] == 1){
Het_Allele <- "1"
f <- f + (2*(Counts[[j]][[Het_Allele]] - 1)/(sum(Counts[[j]]) - 2))
}
}
# Calcualte internal relatedness
res_tab[i,1] <- (2 * H - f) / (2 * N - f)
}
return(res_tab)
}
IR(Dat_test)
ir_DC(genotypes1)
View(Dat_test)
strsplit("A/B")
strsplit("A/B", split = "?")
strsplit("A/B", split = "/")
Test  <- strsplit("A/B", split = "/")
View(Test)
Test[[1]]
