colnames(Loc_IR_formatted)[idx:(idx+1)] <- c(paste(Loc_nam, "a", sep = ""), paste(Loc_nam, "b", sep = ""))
}
View(Loc_IR_formatted)
View(Loc_IR_formatted)
ir_DC(Loc_IR_formatted)
DC_style_test <- ir_DC(Loc_IR_formatted)
# Get the number of individuals
Individuals <- nrow(Loc_IR_formatted)
# Get the number of loci
Nloc <- ncol(Loc_IR_formatted)
# Get the number of loci
Nloc <- ncol(Loc_IR_formatted)/2
# Set up a results table
res_tab <- data.frame(IR = matrix(NA, nrow = Individuals, ncol = 1), row.names = Inds)
# Get the counts of alleles for each locus
Counts <- list()
# Isolate the genetic data
tmp <- Loc_IR_formatted
# Count the occurrences of 0,1,2 at each locus
for(i in 1:Nloc) {
# Set the same index as above
idx <- i*2-1
tmp_loc <- Loc_IR_formatted[,idx:(idx+1)]
Counts[[i]] <- table(as.matrix(tmp_loc))
}
View(Counts)
tmp[i,idx1] == tmp[i,idx2]
i = 1
tmp[i,idx1] == tmp[i,idx2]
# Which allele is the individual homozygous for
Hom_Allele <- as.character(Loc_IR_formatted[i,idx1])
Counts[[j]][[Hom_Allele]]
sum(Counts[[j]])
as.character(Loc_IR_formatted[i,idx1])
IR <- function(Dat){
# Get the number of individuals
Individuals <- nrow(Loc_IR_formatted)
# Get the number of loci
Nloc <- ncol(Loc_IR_formatted)/2
# Set up a results table
res_tab <- data.frame(IR = matrix(NA, nrow = Individuals, ncol = 1), row.names = Inds)
# Get the counts of alleles for each locus
Counts <- list()
# Count the occurrences of 0,1,2 at each locus
for(i in 1:Nloc) {
# Set the same index as above
idx <- i*2-1
tmp_loc <- Loc_IR_formatted[,idx:(idx+1)]
Counts[[i]] <- table(as.matrix(tmp_loc))
}
### Calculate IR for each individual
for(i in 1:Individuals){
H <- 0
N <- 0
f <- 0
for(j in 1:Nloc){
# Set our index again
idx1 <- 2*j-1
idx2 <- 2*j
if(is.na(Loc_IR_formatted[i,j])){
N <- N +1
} else if(Loc_IR_formatted[i,idx1] == Loc_IR_formatted[i,idx2]){
H <- H + 1
# Which allele is the individual homozygous for
Hom_Allele <- as.character(Loc_IR_formatted[i,idx1])
f <- f + (2 * Counts[[j]][[Hom_Allele]] - 2)/(sum(Counts[[j]]) - 2)
} else if(Loc_IR_formatted[i,idx1] != Loc_IR_formatted[i,idx2]){
# If they are heterozygous that means that they are contributing two alleles, using just a sum of 1 leads to NaN
Het_Allele1 <- as.character(Loc_IR_formatted[i,idx1])
f <- f + (Counts[[j]][[Het_Allele1]] - 1)/(sum(Counts[[j]]) - 2)
Het_Allele2 <- as.character(Loc_IR_formatted[i,idx2])
f <- f + (Counts[[j]][[Het_Allele2]] - 1)/(sum(Counts[[j]]) - 2)
}
}
# Calculate internal relatedness
res_tab[i,1] <- (2 * H - f) / (2 * N - f)
}
return(res_tab)
}
KF_style_IR <- IR(Loc_IR_formatted)
View(KF_style_IR)
View(DC_style_test)
DC_style_test <- ir_DC(Loc_IR_formatted)
View(Loc_IR_formatted)
IR <- function(Dat){
# Get the number of individuals
Individuals <- nrow(Loc_IR_formatted)
# Get the number of loci
Nloc <- ncol(Loc_IR_formatted)/2
# Set up a results table
res_tab <- data.frame(IR = matrix(NA, nrow = Individuals, ncol = 1), row.names = Inds)
# Get the counts of alleles for each locus
Counts <- list()
# Count the occurrences of 0,1,2 at each locus
for(i in 1:Nloc) {
# Set the same index as above
idx <- i*2-1
tmp_loc <- Loc_IR_formatted[,idx:(idx+1)]
Counts[[i]] <- list(table(as.matrix(tmp_loc)))
}
### Calculate IR for each individual
for(i in 1:Individuals){
H <- 0
N <- 0
f <- 0
for(j in 1:Nloc){
# Set our index again
idx1 <- 2*j-1
idx2 <- 2*j
if(is.na(Loc_IR_formatted[i,idx1]) | is.na(Loc_IR_formatted[i,idx2])){
N <- N +1
} else if(Loc_IR_formatted[i,idx1] == Loc_IR_formatted[i,idx2]){
H <- H + 1
# Which allele is the individual homozygous for
Hom_Allele <- as.character(Loc_IR_formatted[i,idx1])
f <- f + (2 * Counts[[j]][[Hom_Allele]] - 2)/(sum(Counts[[j]]) - 2)
} else if(Loc_IR_formatted[i,idx1] != Loc_IR_formatted[i,idx2]){
# If they are heterozygous that means that they are contributing two alleles, using just a sum of 1 leads to NaN
Het_Allele1 <- as.character(Loc_IR_formatted[i,idx1])
f <- f + (Counts[[j]][[Het_Allele1]] - 1)/(sum(Counts[[j]]) - 2)
Het_Allele2 <- as.character(Loc_IR_formatted[i,idx2])
f <- f + (Counts[[j]][[Het_Allele2]] - 1)/(sum(Counts[[j]]) - 2)
}
}
# Calculate internal relatedness
res_tab[i,1] <- (2 * H - f) / (2 * N - f)
}
return(res_tab)
}
KF_style_IR <- IR(Loc_IR_formatted)
# Count the occurrences of 0,1,2 at each locus
for(i in 1:Nloc) {
# Set the same index as above
idx <- i*2-1
tmp_loc <- Loc_IR_formatted[,idx:(idx+1)]
Counts[[i]] <- list(table(as.matrix(tmp_loc)))
}
j = 1
i = 1
# Set our index again
idx1 <- 2*j-1
idx2 <- 2*j
# Which allele is the individual homozygous for
Hom_Allele <- as.character(Loc_IR_formatted[i,idx1])
f + (2 * Counts[[j]][[Hom_Allele]] - 2)/(sum(Counts[[j]]) - 2)
Counts[[j]]
sum(Counts[[j]])
# Count the occurrences of 0,1,2 at each locus
for(i in 1:Nloc) {
# Set the same index as above
idx <- i*2-1
tmp_loc <- Loc_IR_formatted[,idx:(idx+1)]
Counts[[i]] <- list(table(tmp_loc))
}
View(Counts)
Counts[[1]]
sum(Counts[[j]])
idx <- i*2-1
table(Loc_IR_formatted[,idx:(idx+1)])
list(table(Loc_IR_formatted[,idx:(idx+1)]))
table(as.matrix(Loc_IR_formatted[,idx:(idx+1)]))
# Count the occurrences of 0,1,2 at each locus
for(i in 1:Nloc) {
# Set the same index as above
idx <- i*2-1
Counts[[i]] <- list(table(as.matrix(Loc_IR_formatted[,idx:(idx+1)])))
}
i = 1
j - 1
j = 1
Hom_Allele <- as.character(Loc_IR_formatted[i,idx1])
sum(Counts[[j]])
Counts[[1]]
as.matrix(Counts[[1]])
as.data.frame((Counts[[1]]))
sum(as.data.frame((Counts[[1]])))
sum(Counts[[j]])
i = 1
# Count the occurrences of 0,1,2 at each locus
for(i in 1:Nloc) {
# Set the same index as above
idx <- i*2-1
Counts[[i]] <- table(as.matrix(Loc_IR_formatted[,idx:(idx+1)]))
}
View(Counts)
sum(Counts[[j]])
IR <- function(Dat){
# Get the number of individuals
Individuals <- nrow(Loc_IR_formatted)
# Get the number of loci
Nloc <- ncol(Loc_IR_formatted)/2
# Set up a results table
res_tab <- data.frame(IR = matrix(NA, nrow = Individuals, ncol = 1), row.names = Inds)
# Get the counts of alleles for each locus
Counts <- list()
# Count the occurrences of 0,1,2 at each locus
for(i in 1:Nloc) {
# Set the same index as above
idx <- i*2-1
Counts[[i]] <- table(as.matrix(Loc_IR_formatted[,idx:(idx+1)]))
}
### Calculate IR for each individual
for(i in 1:Individuals){
H <- 0
N <- 0
f <- 0
for(j in 1:Nloc){
# Set our index again
idx1 <- 2*j-1
idx2 <- 2*j
if(is.na(Loc_IR_formatted[i,idx1]) | is.na(Loc_IR_formatted[i,idx2])){
N <- N +1
} else if(Loc_IR_formatted[i,idx1] == Loc_IR_formatted[i,idx2]){
H <- H + 1
# Which allele is the individual homozygous for
Hom_Allele <- as.character(Loc_IR_formatted[i,idx1])
f <- f + (2 * Counts[[j]][[Hom_Allele]] - 2)/(sum(Counts[[j]]) - 2)
} else if(Loc_IR_formatted[i,idx1] != Loc_IR_formatted[i,idx2]){
# If they are heterozygous that means that they are contributing two alleles, using just a sum of 1 leads to NaN
Het_Allele1 <- as.character(Loc_IR_formatted[i,idx1])
f <- f + (Counts[[j]][[Het_Allele1]] - 1)/(sum(Counts[[j]]) - 2)
Het_Allele2 <- as.character(Loc_IR_formatted[i,idx2])
f <- f + (Counts[[j]][[Het_Allele2]] - 1)/(sum(Counts[[j]]) - 2)
}
}
# Calculate internal relatedness
res_tab[i,1] <- (2 * H - f) / (2 * N - f)
}
return(res_tab)
}
IR(Loc_IR_formatted)
# Convert to a matrix for calculations
Loc_IR_mat <- as.matrix(Loc_IR_formatted)
View(Loc_IR_mat)
# Estimate internal relatedness
IR <- function(Dat){
# Convert to a matrix for calculations
Loc_IR_mat <- as.matrix(Loc_IR_formatted)
# Get the number of individuals
Individuals <- nrow(Loc_IR_mat)
# Get the number of loci
Nloc <- ncol(Loc_IR_mat)/2
# Set up a results table
res_tab <- data.frame(IR = matrix(NA, nrow = Individuals, ncol = 1), row.names = Inds)
# Get the counts of alleles for each locus
Counts <- list()
# Count the occurrences of 0,1,2 at each locus
for(i in 1:Nloc) {
# Set the same index as above
idx <- i*2-1
Counts[[i]] <- table(Loc_IR_mat[,idx:(idx+1)])
}
### Calculate IR for each individual
for(i in 1:Individuals){
H <- 0
N <- 0
f <- 0
for(j in 1:Nloc){
# Set our index again
idx1 <- 2*j-1
idx2 <- 2*j
if(is.na(Loc_IR_matd[i,idx1]) | is.na(Loc_IR_mat[i,idx2])){
N <- N +1
} else if(Loc_IR_mat[i,idx1] == Loc_IR_mat[i,idx2]){
H <- H + 1
# Which allele is the individual homozygous for
Hom_Allele <- as.character(Loc_IR_mat[i,idx1])
f <- f + (2 * Counts[[j]][[Hom_Allele]] - 2)/(sum(Counts[[j]]) - 2)
} else if(Loc_IR_mat[i,idx1] != Loc_IR_mat[i,idx2]){
# If they are heterozygous that means that they are contributing two alleles, using just a sum of 1 leads to NaN
Het_Allele1 <- as.character(Loc_IR_mat[i,idx1])
f <- f + (Counts[[j]][[Het_Allele1]] - 1)/(sum(Counts[[j]]) - 2)
Het_Allele2 <- as.character(Loc_IR_mat[i,idx2])
f <- f + (Counts[[j]][[Het_Allele2]] - 1)/(sum(Counts[[j]]) - 2)
}
}
# Calculate internal relatedness
res_tab[i,1] <- (2 * H - f) / (2 * N - f)
}
return(res_tab)
}
IR(Loc_IR_formatted)
IR <- function(Dat){
# Convert to a matrix for calculations
Loc_IR_mat <- as.matrix(Loc_IR_formatted)
# Get the number of individuals
Individuals <- nrow(Loc_IR_mat)
# Get the number of loci
Nloc <- ncol(Loc_IR_mat)/2
# Set up a results table
res_tab <- data.frame(IR = matrix(NA, nrow = Individuals, ncol = 1), row.names = Inds)
# Get the counts of alleles for each locus
Counts <- list()
# Count the occurrences of 0,1,2 at each locus
for(i in 1:Nloc) {
# Set the same index as above
idx <- i*2-1
Counts[[i]] <- table(Loc_IR_mat[,idx:(idx+1)])
}
### Calculate IR for each individual
for(i in 1:Individuals){
H <- 0
N <- 0
f <- 0
for(j in 1:Nloc){
# Set our index again
idx1 <- 2*j-1
idx2 <- 2*j
if(is.na(Loc_IR_mat[i,idx1]) | is.na(Loc_IR_mat[i,idx2])){
N <- N +1
} else if(Loc_IR_mat[i,idx1] == Loc_IR_mat[i,idx2]){
H <- H + 1
# Which allele is the individual homozygous for
Hom_Allele <- as.character(Loc_IR_mat[i,idx1])
f <- f + (2 * Counts[[j]][[Hom_Allele]] - 2)/(sum(Counts[[j]]) - 2)
} else if(Loc_IR_mat[i,idx1] != Loc_IR_mat[i,idx2]){
# If they are heterozygous that means that they are contributing two alleles, using just a sum of 1 leads to NaN
Het_Allele1 <- as.character(Loc_IR_mat[i,idx1])
f <- f + (Counts[[j]][[Het_Allele1]] - 1)/(sum(Counts[[j]]) - 2)
Het_Allele2 <- as.character(Loc_IR_mat[i,idx2])
f <- f + (Counts[[j]][[Het_Allele2]] - 1)/(sum(Counts[[j]]) - 2)
}
}
# Calculate internal relatedness
res_tab[i,1] <- (2 * H - f) / (2 * N - f)
}
return(res_tab)
}
IR(Loc_IR_formatted)
IR <- function(Dat){
# Convert to a matrix for calculations
Loc_IR_mat <- as.matrix(Loc_IR_formatted)
# Get the number of individuals
Individuals <- nrow(Loc_IR_mat)
# Get the number of loci
Nloc <- ncol(Loc_IR_mat)/2
# Set up a results table
res_tab <- data.frame(IR = matrix(NA, nrow = Individuals, ncol = 1), row.names = Inds)
# Get the counts of alleles for each locus
Counts <- list()
# Count the occurrences of 0,1,2 at each locus
for(i in 1:Nloc) {
# Set the same index as above
idx <- i*2-1
Counts[[i]] <- table(Loc_IR_mat[,idx:(idx+1)])
}
### Calculate IR for each individual
for(i in 1:Individuals){
H <- 0
N <- 0
f <- 0
for(j in 1:Nloc){
# Set our index again
idx1 <- 2*j-1
idx2 <- 2*j
if(!is.na(Loc_IR_mat[i,idx1]) && !is.na(Loc_IR_mat[i,idx2])){
N <- N +1
} else if(Loc_IR_mat[i,idx1] == Loc_IR_mat[i,idx2]){
H <- H + 1
# Which allele is the individual homozygous for
Hom_Allele <- as.character(Loc_IR_mat[i,idx1])
f <- f + (2 * Counts[[j]][[Hom_Allele]] - 2)/(sum(Counts[[j]]) - 2)
} else if(Loc_IR_mat[i,idx1] != Loc_IR_mat[i,idx2]){
# If they are heterozygous that means that they are contributing two alleles, using just a sum of 1 leads to NaN
Het_Allele1 <- as.character(Loc_IR_mat[i,idx1])
f <- f + (Counts[[j]][[Het_Allele1]] - 1)/(sum(Counts[[j]]) - 2)
Het_Allele2 <- as.character(Loc_IR_mat[i,idx2])
f <- f + (Counts[[j]][[Het_Allele2]] - 1)/(sum(Counts[[j]]) - 2)
}
}
# Calculate internal relatedness
res_tab[i,1] <- (2 * H - f) / (2 * N - f)
}
return(res_tab)
}
IR(Loc_IR_formatted)
# Estimate internal relatedness
IR <- function(Dat){
# Convert to a matrix for calculations
Loc_IR_mat <- as.matrix(Loc_IR_formatted)
# Get the number of individuals
Individuals <- nrow(Loc_IR_mat)
# Get the number of loci
Nloc <- ncol(Loc_IR_mat)/2
# Set up a results table
res_tab <- data.frame(IR = matrix(NA, nrow = Individuals, ncol = 1), row.names = Inds)
# Get the counts of alleles for each locus
Counts <- list()
# Count the occurrences of 0,1,2 at each locus
for(i in 1:Nloc) {
# Set the same index as above
idx <- i*2-1
Counts[[i]] <- table(Loc_IR_mat[,idx:(idx+1)])
}
### Calculate IR for each individual
for(i in 1:Individuals){
H <- 0
N <- 0
f <- 0
for(j in 1:Nloc){
# Set our index again
idx1 <- 2*j-1
idx2 <- 2*j
if((!is.na(Loc_IR_mat[i,idx1])) && (!is.na(Loc_IR_mat[i,idx2]))){
N <- N +1
} else if(Loc_IR_mat[i,idx1] == Loc_IR_mat[i,idx2]){
H <- H + 1
# Which allele is the individual homozygous for
Hom_Allele <- as.character(Loc_IR_mat[i,idx1])
f <- f + (2 * Counts[[j]][[Hom_Allele]] - 2)/(sum(Counts[[j]]) - 2)
} else if(Loc_IR_mat[i,idx1] != Loc_IR_mat[i,idx2]){
# If they are heterozygous that means that they are contributing two alleles, using just a sum of 1 leads to NaN
Het_Allele1 <- as.character(Loc_IR_mat[i,idx1])
f <- f + (Counts[[j]][[Het_Allele1]] - 1)/(sum(Counts[[j]]) - 2)
Het_Allele2 <- as.character(Loc_IR_mat[i,idx2])
f <- f + (Counts[[j]][[Het_Allele2]] - 1)/(sum(Counts[[j]]) - 2)
}
}
# Calculate internal relatedness
res_tab[i,1] <- (2 * H - f) / (2 * N - f)
}
return(res_tab)
}
IR(Loc_IR_formatted)
is.na(Loc_IR_mat[i,idx1])
i = 1
is.na(Loc_IR_mat[i,idx1])
IR <- function(Dat){
# Convert to a matrix for calculations
Loc_IR_mat <- as.matrix(Loc_IR_formatted)
# Get the number of individuals
Individuals <- nrow(Loc_IR_mat)
# Get the number of loci
Nloc <- ncol(Loc_IR_mat)/2
# Set up a results table
res_tab <- data.frame(IR = matrix(NA, nrow = Individuals, ncol = 1), row.names = Inds)
# Get the counts of alleles for each locus
Counts <- list()
# Count the occurrences of 0,1,2 at each locus
for(i in 1:Nloc) {
# Set the same index as above
idx <- i*2-1
Counts[[i]] <- table(Loc_IR_mat[,idx:(idx+1)])
}
### Calculate IR for each individual
for(i in 1:Individuals){
H <- 0
N <- 0
f <- 0
for(j in 1:Nloc){
# Set our index again
idx1 <- 2*j-1
idx2 <- 2*j
if((!is.na(Loc_IR_mat[i,idx1])) && (!is.na(Loc_IR_mat[i,idx2]))){
N <- N +1
}
if(Loc_IR_mat[i,idx1] == Loc_IR_mat[i,idx2]){
H <- H + 1
# Which allele is the individual homozygous for
Hom_Allele <- as.character(Loc_IR_mat[i,idx1])
f <- f + (2 * Counts[[j]][[Hom_Allele]] - 2)/(sum(Counts[[j]]) - 2)
} else if(Loc_IR_mat[i,idx1] != Loc_IR_mat[i,idx2]){
# If they are heterozygous that means that they are contributing two alleles, using just a sum of 1 leads to NaN
Het_Allele1 <- as.character(Loc_IR_mat[i,idx1])
f <- f + (Counts[[j]][[Het_Allele1]] - 1)/(sum(Counts[[j]]) - 2)
Het_Allele2 <- as.character(Loc_IR_mat[i,idx2])
f <- f + (Counts[[j]][[Het_Allele2]] - 1)/(sum(Counts[[j]]) - 2)
}
}
# Calculate internal relatedness
res_tab[i,1] <- (2 * H - f) / (2 * N - f)
}
return(res_tab)
}
IR(Loc_IR_formatted)
View(DC_style_test)
`hl` <-
function(genotypes) {
genotypes <- as.data.frame(genotypes)
genotypes <- as.matrix(genotypes)
individuals <- nrow(genotypes)
loci <- ncol(genotypes) / 2
hl <- array(NA, dim=c(individuals, 1))
E <- array(loci)
frequencies <- array(loci)
for (l in 1:loci) {
E[l] <- 1
g <- 2 * l - 1
h <- 2 * l
frequencies[l] <- list(table(genotypes[, g:h]))
E[l] <- 1 - sum((frequencies[[l]] / sum(frequencies[[l]]))^2)
}
for (i in 1:individuals) {
sum.Eh <- 0
sum.Ej <- 0
for (l in 1:loci) {
g <- 2 * l - 1
h <- 2 * l
if ((!is.na(genotypes[i, g])) && (!is.na(genotypes[i, h]))) {
if (genotypes[i, g] == genotypes[i, h]) {
sum.Eh <- sum.Eh + E[l]
}
else {
sum.Ej <- sum.Ej + E[l]
}
}
}
hl[i] <- sum.Eh / (sum.Eh + sum.Ej)
}
hl
}
hl(Loc_IR_formatted)
