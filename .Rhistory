idx <- i*2-1
tmp[,idx:(idx+1)] <- Loc_split_df
View(IR_dat)
tmp <- Dat[,3:ncol(Dat)]
tmp[tmp == "0"] <- "0/0"
tmp[tmp == "1"] <- "0/2"
tmp[tmp == "2"] <- "2/2"
tmp2 <- tmp
View(tmp2)
rownames(tmp) <- Inds
Loc_IR_formatted_tmp <- data.frame(matrix(NA, nrow = nrow(IR_dat), ncol = ncol(IR_dat)*2), row.names = rownames(tmp))
for(i in 1:ncol(tmp)){
# Get the locus name
Loc_nam <- colnames(tmp)[i]
# Split the genotype
Loc_split <- strsplit(tmp[,i], "/", fixed = T)
# Set the name of individuals
names(Loc_split) <- Dat[,1]
# Bind into a data frame
Loc_split_df <- do.call(rbind, Loc_split)
# Set an index to position the genotypes correctly
idx <- i*2-1
Loc_IR_formatted_tmp[,idx:(idx+1)] <- Loc_split_df
colnames(tmp)[idx:(idx+1)] <- c(paste(Loc_nam, "a", sep = ""), paste(Loc_nam, "b", sep = ""))
}
View(Loc_IR_formatted_tmp)
tmp <- Dat[,3:ncol(Dat)]
tmp[tmp == "0"] <- "0/0"
tmp[tmp == "1"] <- "0/2"
tmp[tmp == "2"] <- "2/2"
rownames(tmp) <- Inds
Loc_IR_formatted_tmp <- data.frame(matrix(NA, nrow = nrow(IR_dat), ncol = ncol(IR_dat)*2), row.names = rownames(tmp))
for(i in 1:ncol(tmp)){
# Get the locus name
Loc_nam <- colnames(tmp)[i]
# Split the genotype
Loc_split <- strsplit(tmp[,i], "/", fixed = T)
# Set the name of individuals
names(Loc_split) <- Dat[,1]
# Bind into a data frame
Loc_split_df <- do.call(rbind, Loc_split)
# Set an index to position the genotypes correctly
idx <- i*2-1
Loc_IR_formatted_tmp[,idx:(idx+1)] <- Loc_split_df
colnames(Loc_IR_formatted_tmp)[idx:(idx+1)] <- c(paste(Loc_nam, "a", sep = ""), paste(Loc_nam, "b", sep = ""))
}
View(Loc_IR_formatted_tmp)
# Convert to a matrix for calculations
Loc_IR_mat_tmp <- as.matrix(Loc_IR_formatted_tmp)
View(Loc_IR_mat_tmp)
View(Loc_IR_mat)
# Get the number of individuals
Individuals <- nrow(Loc_IR_mat_tmp)
# Get the number of loci
Nloc <- ncol(Loc_IR_mat_tmp)/2
# Set up a results table
res_tab <- data.frame(IR = matrix(NA, nrow = Individuals, ncol = 1), row.names = Inds)
# Get the counts of alleles for each locus
Counts2 <- list()
# Count the occurrences of 0,1,2 at each locus
for(i in 1:Nloc) {
# Set the same index as above
idx <- i*2-1
Counts2[[i]] <- table(Loc_IR_mat_tmp[,idx:(idx+1)])
}
View(Counts2)
for(i in 1:ncol(IR_dat)){
# Get the locus name
Loc_nam <- colnames(IR_dat)[i]
# Split the genotype
Loc_split <- strsplit(IR_dat[,i], "/", fixed = T)
# Set the name of individuals
names(Loc_split) <- rownames(IR_dat)
# Bind into a data frame
Loc_split_df <- do.call(rbind, Loc_split)
# Set an index to position the genotypes correctly
idx <- i*2-1
Loc_IR_formatted[,idx:(idx+1)] <- Loc_split_df
colnames(Loc_IR_formatted)[idx:(idx+1)] <- c(paste(Loc_nam, "a", sep = ""), paste(Loc_nam, "b", sep = ""))
}
### Calculate IR for each individual
for(i in 1:Individuals){
H <- 0
N <- 0
f <- 0
for(j in 1:Nloc){
# Set our index again
idx1 <- 2*j-1
idx2 <- 2*j
if((!is.na(Loc_IR_mat[i,idx1])) && (!is.na(Loc_IR_mat[i,idx2]))){
N <- N +1
}
if(Loc_IR_mat[i,idx1] == Loc_IR_mat[i,idx2]){
H <- H + 1
# Which allele is the individual homozygous for
Hom_Allele <- as.character(Loc_IR_mat[i,idx1])
f <- f + (2 * Counts[[j]][[Hom_Allele]] - 2)/(sum(Counts[[j]]) - 2)
} else if(Loc_IR_mat[i,idx1] != Loc_IR_mat[i,idx2]){
# If they are heterozygous that means that they are contributing two alleles, using just a sum of 1 leads to NaN
Het_Allele1 <- as.character(Loc_IR_mat[i,idx1])
f <- f + (Counts[[j]][[Het_Allele1]] - 1)/(sum(Counts[[j]]) - 2)
Het_Allele2 <- as.character(Loc_IR_mat[i,idx2])
f <- f + (Counts[[j]][[Het_Allele2]] - 1)/(sum(Counts[[j]]) - 2)
}
}
# Calculate internal relatedness
res_tab[i,1] <- (2 * H - f) / (2 * N - f)
}
### Calculate IR for each individual
for(i in 1:Individuals){
H <- 0
N <- 0
f <- 0
for(j in 1:Nloc){
# Set our index again
idx1 <- 2*j-1
idx2 <- 2*j
if((!is.na(Loc_IR_mat_tmp[i,idx1])) && (!is.na(Loc_IR_mat_tmp[i,idx2]))){
N <- N +1
}
if(Loc_IR_mat_tmp[i,idx1] == Loc_IR_mat_tmp[i,idx2]){
H <- H + 1
# Which allele is the individual homozygous for
Hom_Allele <- as.character(Loc_IR_mat_tmp[i,idx1])
f <- f + (2 * Counts2[[j]][[Hom_Allele]] - 2)/(sum(Counts2[[j]]) - 2)
} else if(Loc_IR_mat_tmp[i,idx1] != Loc_IR_mat_tmp[i,idx2]){
# If they are heterozygous that means that they are contributing two alleles, using just a sum of 1 leads to NaN
Het_Allele1 <- as.character(Loc_IR_mat_tmp[i,idx1])
f <- f + (Counts2[[j]][[Het_Allele1]] - 1)/(sum(Counts2[[j]]) - 2)
Het_Allele2 <- as.character(Loc_IR_mat_tmp[i,idx2])
f <- f + (Counts2[[j]][[Het_Allele2]] - 1)/(sum(Counts2[[j]]) - 2)
}
}
# Calculate internal relatedness
res_tab[i,1] <- (2 * H - f) / (2 * N - f)
}
View(res_tab)
IR_perind <- IR(Dat)
View(IR_perind)
tmp <- Dat[,3:ncol(Dat)]
tmp[tmp == "0"] <- "0/0"
tmp[tmp == "1"] <- "0/2"
tmp[tmp == "2"] <- "2/2"
rownames(tmp) <- Inds
Loc_HL_formatted <- data.frame(matrix(NA, nrow = nrow(tmp), ncol = ncol(tmp)*2), row.names = rownames(tmp))
for(i in 1:ncol(tmp)){
# Get the locus name
Loc_nam <- colnames(tmp)[i]
# Split the genotype
Loc_split <- strsplit(tmp[,i], "/", fixed = T)
# Set the name of individuals
names(Loc_split) <- Dat[,1]
# Bind into a data frame
Loc_split_df <- do.call(rbind, Loc_split)
# Set an index to position the genotypes correctly
idx <- i*2-1
Loc_HL_formatted[,idx:(idx+1)] <- Loc_split_df
colnames(Loc_HL_formatted)[idx:(idx+1)] <- c(paste(Loc_nam, "a", sep = ""), paste(Loc_nam, "b", sep = ""))
}
Loc_HL_mat <- as.matrix(Loc_HL_formatted)
View(Loc_HL_formatted)
View(Loc_HL_mat)
?array()
E <- array(Nloc)
E
frequencies <- array(Nloc)
for (l in 1:Nloc) {
E[l] <- 1
g <- 2 * l - 1
h <- 2 * l
frequencies[l] <- list(table(genotypes[, g:h]))
E[l] <- 1 - sum((frequencies[[l]] / sum(frequencies[[l]]))^2)
}
for (l in 1:Nloc) {
E[l] <- 1
g <- 2 * l - 1
h <- 2 * l
frequencies[l] <- list(table(Loc_HL_mat[, g:h]))
E[l] <- 1 - sum((frequencies[[l]] / sum(frequencies[[l]]))^2)
}
View(frequencies)
# Count the occurrences of each allele (0 and 2) at each locus
for(i in 1:Nloc) {
# Set the same index as above
idx <- i*2-1
Counts[[i]] <- table(Loc_HL_mat[,idx:(idx+1)])
E[i] <- 1 - sum((Counts[[i]] / sum(Counts[[i]]))^2)
}
E
# Estimate homozygosity by locus
HL <- function(Dat){
# Extract genetic data and convert to count the frequency of allele s
tmp <- Dat[,3:ncol(Dat)]
tmp[tmp == "0"] <- "0/0"
tmp[tmp == "1"] <- "0/2"
tmp[tmp == "2"] <- "2/2"
rownames(tmp) <- Inds
Loc_HL_formatted <- data.frame(matrix(NA, nrow = nrow(tmp), ncol = ncol(tmp)*2), row.names = rownames(tmp))
for(i in 1:ncol(tmp)){
# Get the locus name
Loc_nam <- colnames(tmp)[i]
# Split the genotype
Loc_split <- strsplit(tmp[,i], "/", fixed = T)
# Set the name of individuals
names(Loc_split) <- Dat[,1]
# Bind into a data frame
Loc_split_df <- do.call(rbind, Loc_split)
# Set an index to position the genotypes correctly
idx <- i*2-1
Loc_HL_formatted[,idx:(idx+1)] <- Loc_split_df
colnames(Loc_HL_formatted)[idx:(idx+1)] <- c(paste(Loc_nam, "a", sep = ""), paste(Loc_nam, "b", sep = ""))
}
Loc_HL_mat <- as.matrix(Loc_HL_formatted)
# Get the number of individuals
Individuals <- nrow(Loc_HL_mat)
# Get the number of loci
Nloc <- ncol(Loc_IR_mat)/2
# Set up a results table
res_tab <- data.frame(HL = matrix(NA, nrow = Individuals, ncol = 1), row.names = Inds)
E <- array(Nloc)
frequencies <- array(Nloc)
# Count the occurrences of each allele (0 and 2) at each locus
for(i in 1:Nloc) {
# Set the same index as above
idx <- i*2-1
Counts[[i]] <- table(Loc_HL_mat[,idx:(idx+1)])
E[i] <- 1 - sum((Counts[[i]] / sum(Counts[[i]]))^2)
}
for (i in 1:Individuals) {
sum.Eh <- 0
sum.Ej <- 0
for (l in 1:loci) {
idx1 <- 2*j-1
idx2 <- 2*j
if ((!is.na(Loc_HL_mat[i, idx1])) && (!is.na(Loc_HL_mat[i, idx2]))) {
if (Loc_HL_mat[i, idx1] == Loc_HL_mat[i, idx2]) {
sum.Eh <- sum.Eh + E[l]
}
else {
sum.Ej <- sum.Ej + E[l]
}
}
}
res_tab[i] <- sum.Eh / (sum.Eh + sum.Ej)
}
return(res_tab)
}
HL(Dat)
# Estimate homozygosity by locus
HL <- function(Dat){
# Extract genetic data and convert to count the frequency of allele s
tmp <- Dat[,3:ncol(Dat)]
tmp[tmp == "0"] <- "0/0"
tmp[tmp == "1"] <- "0/2"
tmp[tmp == "2"] <- "2/2"
rownames(tmp) <- Inds
Loc_HL_formatted <- data.frame(matrix(NA, nrow = nrow(tmp), ncol = ncol(tmp)*2), row.names = rownames(tmp))
for(i in 1:ncol(tmp)){
# Get the locus name
Loc_nam <- colnames(tmp)[i]
# Split the genotype
Loc_split <- strsplit(tmp[,i], "/", fixed = T)
# Set the name of individuals
names(Loc_split) <- Dat[,1]
# Bind into a data frame
Loc_split_df <- do.call(rbind, Loc_split)
# Set an index to position the genotypes correctly
idx <- i*2-1
Loc_HL_formatted[,idx:(idx+1)] <- Loc_split_df
colnames(Loc_HL_formatted)[idx:(idx+1)] <- c(paste(Loc_nam, "a", sep = ""), paste(Loc_nam, "b", sep = ""))
}
Loc_HL_mat <- as.matrix(Loc_HL_formatted)
# Get the number of individuals
Individuals <- nrow(Loc_HL_mat)
# Get the number of loci
Nloc <- ncol(Loc_IR_mat)/2
# Set up a results table
res_tab <- data.frame(HL = matrix(NA, nrow = Individuals, ncol = 1), row.names = Inds)
E <- array(Nloc)
frequencies <- array(Nloc)
# Count the occurrences of each allele (0 and 2) at each locus
for(i in 1:Nloc) {
# Set the same index as above
idx <- i*2-1
Counts[[i]] <- table(Loc_HL_mat[,idx:(idx+1)])
E[i] <- 1 - sum((Counts[[i]] / sum(Counts[[i]]))^2)
}
for (i in 1:Individuals) {
sum.Eh <- 0
sum.Ej <- 0
for (l in 1:Nloc) {
idx1 <- 2*j-1
idx2 <- 2*j
if ((!is.na(Loc_HL_mat[i, idx1])) && (!is.na(Loc_HL_mat[i, idx2]))) {
if (Loc_HL_mat[i, idx1] == Loc_HL_mat[i, idx2]) {
sum.Eh <- sum.Eh + E[l]
}
else {
sum.Ej <- sum.Ej + E[l]
}
}
}
res_tab[i] <- sum.Eh / (sum.Eh + sum.Ej)
}
return(res_tab)
}
HL(Dat)
hl_dc <-
function(genotypes) {
genotypes <- as.data.frame(genotypes)
genotypes <- as.matrix(genotypes)
individuals <- nrow(genotypes)
loci <- ncol(genotypes) / 2
hl <- array(NA, dim=c(individuals, 1))
E <- array(loci)
frequencies <- array(loci)
for (l in 1:loci) {
E[l] <- 1
g <- 2 * l - 1
h <- 2 * l
frequencies[l] <- list(table(genotypes[, g:h]))
E[l] <- 1 - sum((frequencies[[l]] / sum(frequencies[[l]]))^2)
}
for (i in 1:individuals) {
sum.Eh <- 0
sum.Ej <- 0
for (l in 1:loci) {
g <- 2 * l - 1
h <- 2 * l
if ((!is.na(genotypes[i, g])) && (!is.na(genotypes[i, h]))) {
if (genotypes[i, g] == genotypes[i, h]) {
sum.Eh <- sum.Eh + E[l]
}
else {
sum.Ej <- sum.Ej + E[l]
}
}
}
hl[i] <- sum.Eh / (sum.Eh + sum.Ej)
}
hl
}
View(IR_dat)
hl_dc(IR_dat)
# Extract genetic data and convert to count the frequency of allele s
tmp <- Dat[,3:ncol(Dat)]
tmp[tmp == "0"] <- "0/0"
tmp[tmp == "1"] <- "0/2"
tmp[tmp == "2"] <- "2/2"
rownames(tmp) <- Inds
Loc_HL_formatted <- data.frame(matrix(NA, nrow = nrow(tmp), ncol = ncol(tmp)*2), row.names = rownames(tmp))
View(Loc_HL_formatted)
for(i in 1:ncol(tmp)){
# Get the locus name
Loc_nam <- colnames(tmp)[i]
# Split the genotype
Loc_split <- strsplit(tmp[,i], "/", fixed = T)
# Set the name of individuals
names(Loc_split) <- Dat[,1]
# Bind into a data frame
Loc_split_df <- do.call(rbind, Loc_split)
# Set an index to position the genotypes correctly
idx <- i*2-1
Loc_HL_formatted[,idx:(idx+1)] <- Loc_split_df
colnames(Loc_HL_formatted)[idx:(idx+1)] <- c(paste(Loc_nam, "a", sep = ""), paste(Loc_nam, "b", sep = ""))
}
View(Loc_HL_formatted)
Loc_HL_mat <- as.matrix(Loc_HL_formatted)
View(Loc_HL_mat)
# Get the number of individuals
Individuals <- nrow(Loc_HL_mat)
# Get the number of loci
Nloc <- ncol(Loc_IR_mat)/2
# Set up a results table
res_tab <- data.frame(HL = matrix(NA, nrow = Individuals, ncol = 1), row.names = Inds)
View(res_tab)
E <- array(Nloc)
frequencies <- array(Nloc)
# Count the occurrences of each allele (0 and 2) at each locus
for(i in 1:Nloc) {
# Set the same index as above
idx <- i*2-1
Counts[[i]] <- table(Loc_HL_mat[,idx:(idx+1)])
E[i] <- 1 - sum((Counts[[i]] / sum(Counts[[i]]))^2)
}
for (i in 1:Individuals) {
sum.Eh <- 0
sum.Ej <- 0
for (l in 1:Nloc) {
idx1 <- 2*j-1
idx2 <- 2*j
if ((!is.na(Loc_HL_mat[i, idx1])) && (!is.na(Loc_HL_mat[i, idx2]))) {
if (Loc_HL_mat[i, idx1] == Loc_HL_mat[i, idx2]) {
sum.Eh <- sum.Eh + E[l]
}
else {
sum.Ej <- sum.Ej + E[l]
}
}
}
res_tab[i] <- sum.Eh / (sum.Eh + sum.Ej)
}
View(res_tab)
Counts <- array(Nloc)
# Count the occurrences of each allele (0 and 2) at each locus
for(i in 1:Nloc) {
# Set the same index as above
idx <- i*2-1
Counts[[i]] <- table(Loc_HL_mat[,idx:(idx+1)])
E[i] <- 1 - sum((Counts[[i]] / sum(Counts[[i]]))^2)
}
E <- array(Nloc)
Counts <- array(Nloc)
# Count the occurrences of each allele (0 and 2) at each locus
for(i in 1:Nloc) {
# Set the same index as above
idx <- i*2-1
Counts[i] <- table(Loc_HL_mat[,idx:(idx+1)])
E[i] <- 1 - sum((Counts[[i]] / sum(Counts[[i]]))^2)
}
# Count the occurrences of each allele (0 and 2) at each locus
for(i in 1:Nloc) {
# Set the same index as above
idx <- i*2-1
Counts[i] <- list(table(Loc_HL_mat[,idx:(idx+1)]))
E[i] <- 1 - sum((Counts[[i]] / sum(Counts[[i]]))^2)
}
View(Counts)
for (i in 1:Individuals) {
sum.Eh <- 0
sum.Ej <- 0
for (l in 1:Nloc) {
idx1 <- 2*j-1
idx2 <- 2*j
if ((!is.na(Loc_HL_mat[i, idx1])) && (!is.na(Loc_HL_mat[i, idx2]))) {
if (Loc_HL_mat[i, idx1] == Loc_HL_mat[i, idx2]) {
sum.Eh <- sum.Eh + E[l]
}
else {
sum.Ej <- sum.Ej + E[l]
}
}
}
res_tab[i] <- sum.Eh / (sum.Eh + sum.Ej)
}
View(res_tab)
E <- array(Nloc)
Counts <- array(Nloc)
# Count the occurrences of each allele (0 and 2) at each locus
for(i in 1:Nloc) {
E[i] <- 1
# Set the same index as above
idx <- i*2-1
Counts[i] <- list(table(Loc_HL_mat[,idx:(idx+1)]))
E[i] <- 1 - sum((Counts[[i]] / sum(Counts[[i]]))^2)
}
for (i in 1:Individuals) {
sum.Eh <- 0
sum.Ej <- 0
for (j in 1:Nloc) {
idx1 <- 2*j-1
idx2 <- 2*j
if ((!is.na(Loc_HL_mat[i, idx1])) && (!is.na(Loc_HL_mat[i, idx2]))) {
if (Loc_HL_mat[i, idx1] == Loc_HL_mat[i, idx2]) {
sum.Eh <- sum.Eh + E[l]
}
else {
sum.Ej <- sum.Ej + E[l]
}
}
}
res_tab[i] <- sum.Eh / (sum.Eh + sum.Ej)
}
View(res_tab)
for (i in 1:Individuals) {
sum.Eh <- 0
sum.Ej <- 0
for (j in 1:Nloc) {
idx1 <- 2*j-1
idx2 <- 2*j
if ((!is.na(Loc_HL_mat[i, idx1])) && (!is.na(Loc_HL_mat[i, idx2]))) {
if (Loc_HL_mat[i, idx1] == Loc_HL_mat[i, idx2]) {
sum.Eh <- sum.Eh + E[l]
}
else {
sum.Ej <- sum.Ej + E[l]
}
}
}
res_tab[i,1] <- sum.Eh / (sum.Eh + sum.Ej)
}
View(res_tab)
hl_dc(IR_dat)
View(Loc_HL_formatted)
for (i in 1:Individuals) {
sum.Eh <- 0
sum.Ej <- 0
for (j in 1:Nloc) {
idx1 <- 2*j-1
idx2 <- 2*j
if ((!is.na(Loc_HL_mat[i, idx1])) && (!is.na(Loc_HL_mat[i, idx2]))) {
if (Loc_HL_mat[i, idx1] == Loc_HL_mat[i, idx2]) {
sum.Eh <- sum.Eh + E[j]
}
else {
sum.Ej <- sum.Ej + E[j]
}
}
}
res_tab[i] <- sum.Eh / (sum.Eh + sum.Ej)
}
View(res_tab)
