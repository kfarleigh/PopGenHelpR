Breaks <- summary(Div_mat[,1])
Breaks <- as.numeric(Breaks[1:5])
}
else{
Breaks <- breaks
Breaks <- as.numeric(Breaks)
}
Breaks <- round(Breaks,2)
### Heterozygosity Map
# Map it with colored points
Div_map <- base_map + ggplot2::coord_sf(xlim = c(Long_Min, Long_Max),  ylim = c(Lat_Min, Lat_Max)) +
ggplot2::geom_point(data = Div_mat, ggplot2::aes(x = .data$Longitude, y = .data$Latitude, color = Div_mat[,1]), shape = 19, size = 3) +
ggplot2::scale_color_gradient2(low = col[1], mid = col[2], high = col[3], midpoint = mean(Div_mat[,1]), breaks = Breaks, name = statistic) +
ggplot2::theme(panel.grid=ggplot2::element_blank(), legend.position = "right") +
ggplot2::xlab('Longitude') + ggplot2::ylab('Latitude')
Output <- list(Div_map, Div_mat)
names(Output) <- c(paste(statistic," Map", sep = ""), "Plotting Dataframe")
return(Output)
}
Test <- Point_map(Het_dat, statistic = "Heterozygosity")
Test$`Heterozygosity Map`
library(devtools)
document()
data("HornedLizard_Pop")
View(HornedLizard_Pop)
col = c("#A9A9A9", "#000000")
col[1]
# Set colors
Fill_col <- col[1]
Outline_col <- col[2]
#' @importFrom rlang .data
#'
#' @author Keaka Farleigh
#'
#' @export
#'
#' @examples
#' \donttest{
#' data("HornedLizard_Pop")
#' Test <- Plot_coordinates(HornedLizard_Pop)}
Plot_coordinates <- function(dat, breaks = NULL, col = c("#A9A9A9", "#000000"), Lat_buffer = 1, Long_buffer = 1){
Long <- Lat <- x <- y <- z <- alpha <- world <- NULL
################### Get the data for mapping
# Get map data
map <- spData::world["continent"]
states <- spData::us_states["REGION"]
### Make a base map for the countries of interest
base_map <- ggplot2::ggplot() + ggplot2::geom_sf(data = map, fill = "#f4f4f4") +
ggplot2::geom_sf(data = states, fill = ggplot2::alpha("#f4f4f4", 0))
# Read in files
if(is.data.frame(dat) == TRUE){
Div_mat <- dat
}
else if(is.character(dat) == TRUE){
Div_mat <- utils::read.csv(dat)
}
else{
stop("Please supply a dataframe or .csv file name for analysis")
}
Locs <- Div_mat[,4:5]
### Get coordinate ranges for our data
Lat_Min <- min(Div_mat$Latitude) - Lat_buffer
Lat_Max <- max(Div_mat$Latitude) + Lat_buffer
Long_Min <- min(Div_mat$Longitude) - Long_buffer
Long_Max <- max(Div_mat$Longitude) + Long_buffer
# Set colors
Fill_col <- col[1]
Outline_col <- col[2]
### Heterozygosity Map
# Map it with colored points
map <- base_map + ggplot2::coord_sf(xlim = c(Long_Min, Long_Max),  ylim = c(Lat_Min, Lat_Max)) +
ggplot2::geom_point(data = Div_mat, ggplot2::aes(x = .data$Longitude, y = .data$Latitude), shape = 19, size = 3, fill = Fill_col, color = Outline_col) +
ggplot2::theme(panel.grid=ggplot2::element_blank(), legend.position = ggplot2::element_blank()) +
ggplot2::xlab('Longitude') + ggplot2::ylab('Latitude')
Output <- map
return(Output)
}
Test <- Plot_coordinates(HornedLizard_Pop)
#' @importFrom rlang .data
#'
#' @author Keaka Farleigh
#'
#' @export
#'
#' @examples
#' \donttest{
#' data("HornedLizard_Pop")
#' Test <- Plot_coordinates(HornedLizard_Pop)}
Plot_coordinates <- function(dat, breaks = NULL, col = c("#A9A9A9", "#000000"), Lat_buffer = 1, Long_buffer = 1){
Long <- Lat <- x <- y <- z <- alpha <- world <- NULL
################### Get the data for mapping
# Get map data
map <- spData::world["continent"]
states <- spData::us_states["REGION"]
### Make a base map for the countries of interest
base_map <- ggplot2::ggplot() + ggplot2::geom_sf(data = map, fill = "#f4f4f4") +
ggplot2::geom_sf(data = states, fill = ggplot2::alpha("#f4f4f4", 0))
# Read in files
if(is.data.frame(dat) == TRUE){
Div_mat <- dat
}
else if(is.character(dat) == TRUE){
Div_mat <- utils::read.csv(dat)
}
else{
stop("Please supply a dataframe or .csv file name for analysis")
}
### Get coordinate ranges for our data
Lat_Min <- min(Div_mat$Latitude) - Lat_buffer
Lat_Max <- max(Div_mat$Latitude) + Lat_buffer
Long_Min <- min(Div_mat$Longitude) - Long_buffer
Long_Max <- max(Div_mat$Longitude) + Long_buffer
# Set colors
Fill_col <- col[1]
Outline_col <- col[2]
### Heterozygosity Map
# Map it with colored points
map <- base_map + ggplot2::coord_sf(xlim = c(Long_Min, Long_Max),  ylim = c(Lat_Min, Lat_Max)) +
ggplot2::geom_point(data = Div_mat, ggplot2::aes(x = .data$Longitude, y = .data$Latitude), shape = 19, size = 3, fill = Fill_col, color = Outline_col) +
ggplot2::theme(panel.grid=ggplot2::element_blank(), legend.position = ggplot2::element_blank()) +
ggplot2::xlab('Longitude') + ggplot2::ylab('Latitude')
Output <- map
return(Output)
}
Test <- Plot_coordinates(HornedLizard_Pop)
Test
################### Get the data for mapping
# Get map data
map <- spData::world["continent"]
states <- spData::us_states["REGION"]
### Make a base map for the countries of interest
base_map <- ggplot2::ggplot() + ggplot2::geom_sf(data = map, fill = "#f4f4f4") +
ggplot2::geom_sf(data = states, fill = ggplot2::alpha("#f4f4f4", 0))
# Read in files
if(is.data.frame(dat) == TRUE){
Div_mat <- dat
}
else if(is.character(dat) == TRUE){
dat <- HornedLizard_Pop
### Make a base map for the countries of interest
base_map <- ggplot2::ggplot() + ggplot2::geom_sf(data = map, fill = "#f4f4f4") +
ggplot2::geom_sf(data = states, fill = ggplot2::alpha("#f4f4f4", 0))
# Read in files
if(is.data.frame(dat) == TRUE){
Div_mat <- dat
}
else if(is.character(dat) == TRUE){
else{
### Get coordinate ranges for our data
Lat_Min <- min(Div_mat$Latitude) - Lat_buffer
Lat_buffer = 1
Long_buffer = 1
### Get coordinate ranges for our data
Lat_Min <- min(Div_mat$Latitude) - Lat_buffer
Lat_Max <- max(Div_mat$Latitude) + Lat_buffer
Long_Min <- min(Div_mat$Longitude) - Long_buffer
Long_Max <- max(Div_mat$Longitude) + Long_buffer
# Set colors
Fill_col <- col[1]
Outline_col <- col[2]
### Heterozygosity Map
# Map it with colored points
map <- base_map + ggplot2::coord_sf(xlim = c(Long_Min, Long_Max),  ylim = c(Lat_Min, Lat_Max)) +
ggplot2::geom_point(data = Div_mat, ggplot2::aes(x = .data$Longitude, y = .data$Latitude), shape = 19, size = 3, fill = Fill_col, color = Outline_col) +
ggplot2::theme(panel.grid=ggplot2::element_blank(), legend.position = ggplot2::element_blank()) +
ggplot2::xlab('Longitude') + ggplot2::ylab('Latitude')
base_map + ggplot2::coord_sf(xlim = c(Long_Min, Long_Max),  ylim = c(Lat_Min, Lat_Max)) +
ggplot2::geom_point(data = Div_mat, ggplot2::aes(x = .data$Longitude, y = .data$Latitude), shape = 19, size = 3, fill = Fill_col, color = Outline_col) +
ggplot2::theme(panel.grid=ggplot2::element_blank(), legend.position = ggplot2::element_blank()) +
ggplot2::xlab('Longitude') + ggplot2::ylab('Latitude')
base_map + ggplot2::coord_sf(xlim = c(Long_Min, Long_Max),  ylim = c(Lat_Min, Lat_Max)) +
ggplot2::geom_point(data = Div_mat, ggplot2::aes(x = .data$Longitude, y = .data$Latitude), shape = 19, size = 3, fill = Fill_col, color = Outline_col) +
ggplot2::theme(panel.grid=ggplot2::element_blank(), legend.position = ggplot2::element_blank()) +
ggplot2::xlab('Longitude') + ggplot2::ylab('Latitude')
base_map + ggplot2::coord_sf(xlim = c(Long_Min, Long_Max),  ylim = c(Lat_Min, Lat_Max)) +
ggplot2::geom_point(data = Div_mat, ggplot2::aes(x = .data$Longitude, y = .data$Latitude), shape = 19, size = 3, fill = "black", color = "red") +
ggplot2::theme(panel.grid=ggplot2::element_blank(), legend.position = ggplot2::element_blank()) +
ggplot2::xlab('Longitude') + ggplot2::ylab('Latitude')
View(Div_mat)
base_map + ggplot2::coord_sf(xlim = c(Long_Min, Long_Max),  ylim = c(Lat_Min, Lat_Max)) +
ggplot2::geom_point(data = Div_mat, ggplot2::aes(x = .data$Longitude, y = .data$Latitude), shape = 19, size = 3, fill = Fill_col, color = Outline_col)
# Set colors
Fill_col <- col[1]
Outline_col <- col[2]
base_map + ggplot2::coord_sf(xlim = c(Long_Min, Long_Max),  ylim = c(Lat_Min, Lat_Max)) +
ggplot2::geom_point(data = Div_mat, ggplot2::aes(x = .data$Longitude, y = .data$Latitude), shape = 19, size = 3, fill = Fill_col, color = Outline_col)
base_map + ggplot2::coord_sf(xlim = c(Long_Min, Long_Max),  ylim = c(Lat_Min, Lat_Max)) +
ggplot2::geom_point(data = Div_mat, ggplot2::aes(x = .data$Longitude, y = .data$Latitude), shape = 21, size = 3, fill = Fill_col, color = Outline_col)
base_map + ggplot2::coord_sf(xlim = c(Long_Min, Long_Max),  ylim = c(Lat_Min, Lat_Max)) +
ggplot2::geom_point(data = Div_mat, ggplot2::aes(x = .data$Longitude, y = .data$Latitude), shape = 21, size = 3, fill = Fill_col, color = Outline_col) +
ggplot2::theme(panel.grid=ggplot2::element_blank(), legend.position = ggplot2::element_blank()) +
ggplot2::xlab('Longitude') + ggplot2::ylab('Latitude')
base_map + ggplot2::coord_sf(xlim = c(Long_Min, Long_Max),  ylim = c(Lat_Min, Lat_Max)) +
ggplot2::geom_point(data = Div_mat, ggplot2::aes(x = .data$Longitude, y = .data$Latitude), shape = 21, size = 3, fill = Fill_col, color = Outline_col) +
ggplot2::theme(panel.grid=ggplot2::element_blank(), legend.position = ggplot2::element_blank())
base_map + ggplot2::coord_sf(xlim = c(Long_Min, Long_Max),  ylim = c(Lat_Min, Lat_Max)) +
ggplot2::geom_point(data = Div_mat, ggplot2::aes(x = .data$Longitude, y = .data$Latitude), shape = 21, size = 3, fill = Fill_col, color = Outline_col) +
ggplot2::theme(panel.grid=ggplot2::element_blank(), legend.position = NULL)
base_map + ggplot2::coord_sf(xlim = c(Long_Min, Long_Max),  ylim = c(Lat_Min, Lat_Max)) +
ggplot2::geom_point(data = Div_mat, ggplot2::aes(x = .data$Longitude, y = .data$Latitude), shape = 21, size = 3, fill = Fill_col, color = Outline_col) +
ggplot2::theme(panel.grid=ggplot2::element_blank(), legend.position = NULL) +
ggplot2::xlab('Longitude') + ggplot2::ylab('Latitude')
#' @importFrom rlang .data
#'
#' @author Keaka Farleigh
#'
#' @export
#'
#' @examples
#' \donttest{
#' data("HornedLizard_Pop")
#' Test <- Plot_coordinates(HornedLizard_Pop)}
Plot_coordinates <- function(dat, breaks = NULL, col = c("#A9A9A9", "#000000"), Lat_buffer = 1, Long_buffer = 1){
Long <- Lat <- x <- y <- z <- alpha <- world <- NULL
################### Get the data for mapping
# Get map data
map <- spData::world["continent"]
states <- spData::us_states["REGION"]
### Make a base map for the countries of interest
base_map <- ggplot2::ggplot() + ggplot2::geom_sf(data = map, fill = "#f4f4f4") +
ggplot2::geom_sf(data = states, fill = ggplot2::alpha("#f4f4f4", 0))
# Read in files
if(is.data.frame(dat) == TRUE){
Div_mat <- dat
}
else if(is.character(dat) == TRUE){
Div_mat <- utils::read.csv(dat)
}
else{
stop("Please supply a dataframe or .csv file name for analysis")
}
### Get coordinate ranges for our data
Lat_Min <- min(Div_mat$Latitude) - Lat_buffer
Lat_Max <- max(Div_mat$Latitude) + Lat_buffer
Long_Min <- min(Div_mat$Longitude) - Long_buffer
Long_Max <- max(Div_mat$Longitude) + Long_buffer
# Set colors
Fill_col <- col[1]
Outline_col <- col[2]
### Heterozygosity Map
# Map it with colored points
map <- base_map + ggplot2::coord_sf(xlim = c(Long_Min, Long_Max),  ylim = c(Lat_Min, Lat_Max)) +
ggplot2::geom_point(data = Div_mat, ggplot2::aes(x = .data$Longitude, y = .data$Latitude), shape = 21, size = 3, fill = Fill_col, color = Outline_col) +
ggplot2::theme(panel.grid=ggplot2::element_blank(), legend.position = NULL) +
ggplot2::xlab('Longitude') + ggplot2::ylab('Latitude')
Output <- map
return(Output)
}
Test <- Plot_coordinates(HornedLizard_Pop)
Test
# Load the package
library(PopGenHelpR)
data("Fst_dat")
data("Het_dat")
data("Q_dat")
data("HornedLizard_Pop")
data("HornedLizard_VCF")
Fst_dat[[1]]
PW_hmap <- Pairwise_heatmap(Fst_dat[[1]], statistic = "Fst", col = c("#4575b4", "#d73027""))
)
PW_hmap <- Pairwise_heatmap(Fst_dat[[1]], statistic = "Fst", col = c("#4575b4", "#d73027"))
PW_hmap
PW_hmap <- Pairwise_heatmap(Fst_dat[[1]], statistic = "Fst", col = c("#4575b4", "#FF0000"))
PW_hmap
PW_hmap <- Pairwise_heatmap(Fst_dat[[1]], statistic = "Fst", col = c("#0000FF", "#FF0000"))
PW_hmap
NW_map <- Network_map(Fst_dat[[1]], pops = HornedLizard_Pop, neighbors = 2)
library(PopGenHelpR)
NW_map <- Network_map(Fst_dat[[1]], pops = HornedLizard_Pop, neighbors = 2)
library(devtools)
document()
NW_map <- Network_map(Fst_dat[[1]], pops = HornedLizard_Pop, neighbors = 2)
NW_map <- Network_map(Fst_dat[[1]], pops = HornedLizard_Pop, neighbors = 2, Lat_buffer = 1, Long_buffer = 1)
document()
NW_map <- Network_map(Fst_dat[[1]], pops = HornedLizard_Pop, neighbors = 2)
NW_map$Map
NW_map <- Network_map(Fst_dat[[1]], pops = Fst_dat[[2]], neighbors = 2)
NW_map$Map
NW_map <- Network_map(Fst_dat[[1]], pops = Fst_dat[[2]], neighbors = 2, statistic = "Fst")
NW_map$Map
NW_map2 <- Network_map(Fst_dat[[1]], pops = Fst_dat[[2]], neighbors = c("East_West"), statistic = "Fst")
NW_map2$Map
NW_map2 <- Network_map(Fst_dat[[1]], pops = Fst_dat[[2]], neighbors = c("East_West"), statistic = "Fst", col = "#FF0000")
NW_map2$Map
NW_map2 <- Network_map(Fst_dat[[1]], pops = Fst_dat[[2]], neighbors = c("East_West", "East_South"), statistic = "Fst", col = "#FF0000")
NW_map2$Map
NW_map2 <- Network_map(Fst_dat[[1]], pops = Fst_dat[[2]], neighbors = c("East_West", "East_South"), statistic = "Fst")
NW_map2$Map
build_site()
build_site()
Het_map <- Point_map(Het_dat, statistic = "Heterozygosity")
Het_map$`Heterozygosity Map`
document()
Het_map <- Point_map(Het_dat, statistic = "Heterozygosity")
Het_map$`Heterozygosity Map`
document()
Het_map <- Point_map(Het_dat, statistic = "Heterozygosity")
Het_map$`Heterozygosity Map`
document()
Het_map <- Point_map(Het_dat, statistic = "Heterozygosity")
Het_map$`Heterozygosity Map`
### Heterozygosity Map
# Map it with colored points
Div_map <- base_map + ggplot2::coord_sf(xlim = c(Long_Min, Long_Max),  ylim = c(Lat_Min, Lat_Max)) +
ggplot2::geom_point(data = Div_mat, ggplot2::aes(x = .data$Longitude, y = .data$Latitude, color = "#000000"), shape = 19, size = out.size) +
ggplot2::geom_point(data = Div_mat, ggplot2::aes(x = .data$Longitude, y = .data$Latitude, fill = Div_mat[,1]), shape = 19, size = size) +
ggplot2::scale_color_gradient2(low = col[1], mid = col[2], high = col[3], midpoint = mean(Div_mat[,1]), breaks = Breaks, name = statistic) +
ggplot2::theme(panel.grid=ggplot2::element_blank(), legend.position = "right") +
ggplot2::xlab('Longitude') + ggplot2::ylab('Latitude')
document()
Het_map$`Heterozygosity Map`
Het_map <- Point_map(Het_dat, statistic = "Heterozygosity")
Het_map$`Heterozygosity Map`
document()
Het_map <- Point_map(Het_dat, statistic = "Heterozygosity")
Het_map$`Heterozygosity Map`
document()
Het_map <- Point_map(Het_dat, statistic = "Heterozygosity")
document()
Het_map <- Point_map(Het_dat, statistic = "Heterozygosity")
Het_map$`Heterozygosity Map`
document()
Het_map <- Point_map(Het_dat, statistic = "Heterozygosity")
document()
Het_map <- Point_map(Het_dat, statistic = "Heterozygosity")
Het_map <- Point_map(Het_dat, statistic = "Heterozygosity")
Het_map$`Heterozygosity Map`
Het_map <- Point_map(Het_dat, statistic = "Heterozygosity", out.col = NULL)
Het_map$`Heterozygosity Map`
document()
Het_map <- Point_map(Het_dat, statistic = "Heterozygosity", out.col = NULL)
Het_map$`Heterozygosity Map`
document()
Het_map <- Point_map(Het_dat, statistic = "Heterozygosity", out.col = NULL)
Het_map$`Heterozygosity Map`
document()
Het_map <- Point_map(Het_dat, statistic = "Heterozygosity", out.col = NULL)
Het_map$`Heterozygosity Map`
document()
Het_map <- Point_map(Het_dat, statistic = "Heterozygosity", out.col = NULL)
Het_map$`Heterozygosity Map`
document()
Het_map <- Point_map(Het_dat, statistic = "Heterozygosity", out.col = NULL)
Het_map$`Heterozygosity Map`
Het_map2 <- Point_map(Het_dat, statistic = "Heterozygosity", out.col = "#000000")
Het_map2$`Heterozygosity Map`
document()
document()
data("HornedLizard_Pop")
Sample_map <- Plot_coordinates(HornedLizard_Pop)
Sample_map
build_site()
build_vignettes()
build_vignettes()
build_site()
build_site()
build_vignettes()
library(devtools)
document()
check()
library(devtools)
library(pkgdown)
build_vignettes()
build_vignettes()
build_site()
build_site()
build_site()
build_site()
# Load the packages
library(PopGenHelpR)
library(hierfstat)
# Load the packages
library(PopGenHelpR)
library(hierfstat)
library(StAMPP)
library(StAMPP)
library(mmod)
library(vcfR)
# Load the data
data("HornedLizard_VCF")
# Load the data
data("HornedLizard_VCF")
data("HornedLizard_Pop")
Stmp_glight <- vcfR2genlight(HornedLizard_VCF)
# Set the population information and ploidy
pops(Stmp_glight) <- as.factor(HornedLizard_Pop$Population)
# StAMPP uses genlight objects
Glight <- vcfR2genlight(HornedLizard_VCF)
ploidy(Glight) <- 2
document()
PGH_fst <- Differentiation(dat = HornedLizard_VCF, pops = HornedLizard_Pop, statistic = "Fst")
Stmp_fst <- stamppFst(Glight, nboots = 0)
Glight@pop <- as.factor(HornedLizard_Pop$Population)
Stmp_fst <- stamppFst(Glight, nboots = 0)
Stmp_fst
PGH_fst$Fst
Stmp_fst
# Is there a difference between the two?
Fst_comparison <- PGH_fst$Fst-Stmp_fst
summary(Fst_comparison)
View(Fst_comparison)
PGH_ND <- Differentiation(data = HornedLizard_VCF, pops = HornedLizard_Pop, statistic = "NeisD")
# StAMPP population Nei's D
Stmp_popND <- stamppNeisD(Glight)
# StAMPP individual Nei's D
Stmp_indND <- stamppNeisD(Glight, pop = FALSE)
# Population comparison
PGH_ND$NeisD_pop
Stmp_popND
popND_comparison <- PGH_ND$NeisD_pop-Stmp_popND
summary(popND_comparison)
# Set StAMPP upper diagnoals to NA
Stmp_popND[upper.tri(Stmp_popND)] <- NA
Stmp_indND[upper.tri(Stmp_indND)] <- NA
popND_comparison <- PGH_ND$NeisD_pop-Stmp_popND
summary(popND_comparison)
# Individual comparison
PGH_ND$NeisD_ind
# Individual comparison
PGH_ND$NeisD_ind
Stmp_indND
indND_comparison <- PGH_ND$NeisD_ind - Stmp_indND
summary(indND_comparison)
View(indND_comparison)
summary(popND_comparison)
# Get the mean difference
mean(Fst_comparison)
# Get the mean difference
mean(Fst_comparison, na.rm = T)
View(Fst_comparison)
# Get the mean difference
mean(popND_comparison, na.rm = T)
mean(indND_comparison)
mean(indND_comparison, na.rm = T)
# Population comparison
PGH_ND$NeisD_pop
Stmp_popND
summary(popND_comparison)
Stmp_popND[3,2]
PGH_ND$NeisD_pop[3,2]
PGH_ND$NeisD_pop[3,2]-Stmp_popND[3,2]
Genind <- vcfR2genind(HornedLizard_VCF)
Genind@pop <- as.factor(HornedLizard_Pop$Population)
Genind@ploidy <- 2
plody(Genind) <- 2
ploidy(Genind) <- 2
# Calculate Jost's D
PGH_JD <- Differentiation(data = HornedLizard_VCF, pops = HornedLizard_Pop, statistic = "JostsD")
mmod_JD <- pairwise_D(Genind)
PGH_JD$JostsD
mmod_JD
PGH_JD - mmod_JD
PGH_JD$JostsD - mmod_JD
PGH_JD$JostsD
mmod_JD
PGH_JD$JostsD[2:3,1]
PGH_JD$JostsD[,1] <- PGH_JD$JostsD[2:3,1]
# Reformat the PGH_JD so that we can compare them mathematically
PGH_JD$JostsD[2:3,1] - mmod_JD[,1]
mmod_JD[,1]
mmod_JD[1]
mmod_JD[1:3]
mmod_JD[1:2]
# Reformat the PGH_JD so that we can compare them mathematically
PGH_JD$JostsD[2:3,1] - mmod_JD[1:2]
H_JD$JostsD[2,2] - mmod_JD[3]
# Compare differences mathematically
PGH_JD$JostsD[2:3,1] - mmod_JD[1:2]
PGH_JD$JostsD[2,2] - mmod_JD[3]
Hstt <- genind2hierfstat(Genind)
Hstat <- genind2hierfstat(Genind)
View(Hstat)
### Calculate heterozygosities
# Expected
PGH_He <- Heterozygosity(data = HornedLizard_VCF, pops = HornedLizard_Pop, statistic = "He")
### Calculate heterozygosities
# Expected
PGH_He <- Heterozygosity(data = HornedLizard_VCF, pops = HornedLizard_Pop, statistic = "He")
# Observed
PGH_Ho <- Heterozygosity(data = HornedLizard_VCF, pops = HornedLizard_Pop, statistic = "Ho")
Hstat_hets <- basic.stats(Hstat)
Hstat_hets$overall
View(PGH_He)
Hstat_hets$Hs
colMeans(Hstat_hets$Hs)
PGH_He
PGH_He$He_perpop
colMeans(Hstat_hets$Hs)
colMeans(Hstat_hets$Ho)
PGH_Ho$Ho_perpop
PGH_He$He_perpop-Hstat_He
Hstat_He <- colMeans(Hstat_hets$Hs)
Hstat_Ho <- colMeans(Hstat_hets$Ho)
PGH_He$He_perpop-Hstat_He
PGH_He$He_perpop$Expected.Heterozygosity-Hstat_He
PGH_Ho$Ho_perpop$Observed.Heterozygosity-Hstat_Ho
document()
build_site()
document()
build_site()
.Last.error
load_all()
build_site()
unload()
build_site()
build_site()
build_site()
build_site()
build_site()
check()
pkgdown::build_site()
pkgdown::build_site()
