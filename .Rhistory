pkgdown::build_home_index()
pkgdown::build_home_index()
pkgdown::build_home_index()
install.packages("bslib", force = T)
install.packages("bslib")
install.packages("bslib", force = T)
install.packages("bslib", force = T)
library(bslib)
library(bslib)
pkgdown::build_home_index()
library(pkgdown)
library(bslib)
library(devtools)
build_home_index()
build_home_index()
build_home_index()
build_home_index()
build_home_index()
build_home_index()
build_home_index()
build_home_index()
build_home_index()
build_home_index()
build_home_index()
build_home_index()
build_home_index()
build_site()
build_site()
build_site()
build_site()
# Load the package
library(PopGenHelpR)
knitr::include_graphics("./img/PlotAncestry-1.png")
# First, we seperate the list elements into two seperate objects. The q-matrix (Qmat) and the locality information for each individual (Loc).
Qmat <- Q_dat[[1]]
Loc <- Q_dat[[2]]
# Now we will generate both population and individual plots by setting plot.type to 'all'. If you wanted, you could only generate individual or population plots by setting plot.type to "individual" and "population", respectively.
Test_all <- Ancestry_barchart(anc.mat = Qmat, pops = Loc, K = 5,
plot.type = 'all', col = c('#d73027', '#f46d43', '#e0f3f8', '#74add1', '#313695'), Lat_buffer = 1, Long_buffer = 1)
# Load the package
library(PopGenHelpR)
data("Fst_dat")
data("Het_dat")
data("Q_dat")
data("HornedLizard_Pop")
data("HornedLizard_VCF")
data("Fst_dat")
data("Het_dat")
data("Q_dat")
data("HornedLizard_Pop")
data("HornedLizard_VCF")
# Now we will generate both population and individual plots by setting plot.type to 'all'. If you wanted, you could only generate individual or population plots by setting plot.type to "individual" and "population", respectively.
Test_all <- Ancestry_barchart(anc.mat = Qmat, pops = Loc, K = 5,
plot.type = 'all', col = c('#d73027', '#f46d43', '#e0f3f8', '#74add1', '#313695'), Lat_buffer = 1, Long_buffer = 1)
library(PopGenHelpR)
build()
library(PopGenHelpR)
document()
# Now we will generate both population and individual plots by setting plot.type to 'all'. If you wanted, you could only generate individual or population plots by setting plot.type to "individual" and "population", respectively.
Test_all <- Ancestry_barchart(anc.mat = Qmat, pops = Loc, K = 5,
plot.type = 'all', col = c('#d73027', '#f46d43', '#e0f3f8', '#74add1', '#313695'), Lat_buffer = 1, Long_buffer = 1)
# Now we will generate both population and individual plots by setting plot.type to 'all'. If you wanted, you could only generate individual or population plots by setting plot.type to "individual" and "population", respectively.
Test_all <- Ancestry_barchart(anc.mat = Qmat, pops = Loc, K = 5,
plot.type = 'all', col = c('#d73027', '#f46d43', '#e0f3f8', '#74add1', '#313695'))
Test_all$`Individual Ancestry Plot`
Test_all$`Population Ancestry Plot`
# Now we will generate both population and individual plots by setting plot.type to 'all'. If you wanted, you could only generate individual or population plots by setting plot.type to "individual" and "population", respectively.
Test_all_piemap <- Piechart_map(anc.mat = Qmat, pops = Loc, K = 5,plot.type = 'all', col = c('#d73027', '#f46d43', '#e0f3f8', '#74add1', '#313695'),
Lat_buffer = 1, Long_buffer = 1)
Test_all_piemap$`Individual Map`
Test_all_piemap$`Population Map`
Test_all_piemap$`Individual Map`
build_vignettes()
build_vignettes()
build_vignettes()
build_vignettes()
# First, we seperate the list elements into two seperate objects. The q-matrix (Qmat) and the locality information for each individual (Loc).
Qmat <- Q_dat[[1]]
Loc <- Q_dat[[2]]
# Now we will generate both population and individual plots by setting plot.type to 'all'. If you wanted, you could only generate individual or population plots by setting plot.type to "individual" and "population", respectively.
Test_all_piemap <- Piechart_map(anc.mat = Qmat, pops = Loc, K = 5,plot.type = 'all', col = c('#d73027', '#f46d43', '#e0f3f8', '#74add1', '#313695'),
Lat_buffer = 1, Long_buffer = 1)
# Now we will generate both population and individual plots by setting plot.type to 'all'. If you wanted, you could only generate individual or population plots by setting plot.type to "individual" and "population", respectively.
Test_all_piemap <- Piechart_map(anc.mat = Qmat, pops = Loc, K = 5,plot.type = 'all', col = c('#d73027', '#f46d43', '#e0f3f8', '#74add1', '#313695'),
Lat_buffer = 1, Long_buffer = 1)
Test_all_piemap$`Individual Map`
Test_all_piemap$`Population Map`
# First, we seperate the list elements into two seperate objects. The q-matrix (Qmat) and the locality information for each individual (Loc).
Qmat <- Q_dat[[1]]
Loc <- Q_dat[[2]]
# Now we will generate both population and individual plots by setting plot.type to 'all'. If you wanted, you could only generate individual or population plots by setting plot.type to "individual" and "population", respectively.
Test_all <- Ancestry_barchart(anc.mat = Qmat, pops = Loc, K = 5,plot.type = 'all', col = c('#d73027', '#f46d43', '#e0f3f8', '#74add1', '#313695'))
Test_all$`Population Ancestry Plot`
Test_all$`Individual Ancestry Plot`
build_vignettes()
build_vignettes()
build_vignettes()
Test_all$`Individual Ancestry Plot`
build_vignettes()
build_vignettes()
build_vignettes()
Test_all$`Population Ancestry Plot`
build_vignettes()
Test_all_piemap <- Piechart_map(anc.mat = Qmat, pops = Loc, K = 5,plot.type = 'all', col = c('#d73027', '#f46d43', '#e0f3f8', '#74add1', '#313695'),
Lat_buffer = 1, Long_buffer = 1)
Test_all_piemap$`Individual Map`
Test_all_piemap$`Population Map`
build_vignettes()
build_vignettes()
build_site()
check()
library(PopGenHelpR)
library(devtools)
document()
# Load the package
library(PopGenHelpR)
data("Fst_dat")
data("Het_dat")
data("Q_dat")
data("HornedLizard_Pop")
data("HornedLizard_VCF")
Obs_Het <- Heterozygosity(data = HornedLizard_VCF, pops = HornedLizard_Pop, statistic = "Ho")
Fst <- Differentiation(data = HornedLizard_VCF, pops = HornedLizard_Pop, statistic = "Fst")
View(Fst)
Fst$Fst
PA <- Private.alleles(data = HornedLizard_VCF, pops = HornedLizard_Pop)
View(PA)
PA[["Private.Allele.Metadata"]][["East"]]
build_site()
build_vignettes()
build_vignettes()
build_site()
library(pkgdown)
build_site()
data(Het_dat)
View(Het_dat)
#' @importFrom rlang .data
#'
#' @export
#'
#' @examples
#' \donttest{
#' data(Het_dat)
#' Test_het <- Point_map(dat = Het_dat, plot.type = 'all',
#' statistic = "Heterozygosity",
#' Lat_buffer = 1, Long_buffer = 1, write = FALSE, prefix = 'Test_het')}
Point_map <- function(dat, statistic, breaks = NULL, col, Lat_buffer = 1, Long_buffer = 1){
Long <- Lat <- x <- y <- z <- alpha <- world <- NULL
################### Get the data for mapping
# Get map data
map <- spData::world["continent"]
states <- spData::us_states["REGION"]
### Make a base map for the countries of interest
base_map <- ggplot2::ggplot() + ggplot2::geom_sf(data = map, fill = "#f4f4f4") +
ggplot2::geom_sf(data = states, fill = ggplot2::alpha("#f4f4f4", 0))
# Read in files
if(is.data.frame(dat) == TRUE){
Div_mat <- dat
}
else if(is.character(dat) == TRUE){
Div_mat <- utils::read.csv(dat)
}
else{
stop("Please supply a dataframe or .csv file name for analysis")
}
Locs <- Div_mat[,4:5]
### Get coordinate ranges for our data
Lat_Min <- min(Div_mat$Latitude) - Lat_buffer
Lat_Max <- max(Div_mat$Latitude) + Lat_buffer
Long_Min <- min(Div_mat$Longitude) - Long_buffer
Long_Max <- max(Div_mat$Longitude) + Long_buffer
# Set colors
# Set breaks
if(missing(col)){
col <- c('#4575b4','#ffffbf','#d73027')
}
if(is.null(breaks) == TRUE){
Breaks <- summary(Div_mat[,1])
Breaks <- as.numeric(Breaks[1:5])
}
else{
Breaks <- breaks
Breaks <- as.numeric(Breaks)
}
Breaks <- round(Breaks,2)
if(plot.type == 'all' && write == TRUE) {
### Heterozygosity Map
# Map it with colored points
Div_map <- base_map + ggplot2::coord_sf(xlim = c(Long_Min, Long_Max),  ylim = c(Lat_Min, Lat_Max)) +
ggplot2::geom_point(data = Div_mat, ggplot2::aes(x = .data$Longitude, y = .data$Latitude, color = Div_mat[,1]), shape = 19, size = 3) +
ggplot2::scale_color_gradient2(low = col[1], mid = col[2], high = col[3], midpoint = mean(Div_mat[,1]), breaks = Breaks, name = statistic) +
ggplot2::theme(panel.grid=ggplot2::element_blank(), legend.position = "right") +
ggplot2::xlab('Longitude') + ggplot2::ylab('Latitude')
Output <- list(Div_map, Div_mat)
names(Output) <- c(paste(statistic," Map", sep = ""), "Plotting Dataframe")
return(Output)
}
}
Point_map(Het_dat, statistic = "Heterozygosity")
#' @importFrom rlang .data
#'
#' @export
#'
#' @examples
#' \donttest{
#' data(Het_dat)
#' Test_het <- Point_map(dat = Het_dat, plot.type = 'all',
#' statistic = "Heterozygosity",
#' Lat_buffer = 1, Long_buffer = 1, write = FALSE, prefix = 'Test_het')}
Point_map <- function(dat, statistic, breaks = NULL, col, Lat_buffer = 1, Long_buffer = 1){
Long <- Lat <- x <- y <- z <- alpha <- world <- NULL
################### Get the data for mapping
# Get map data
map <- spData::world["continent"]
states <- spData::us_states["REGION"]
### Make a base map for the countries of interest
base_map <- ggplot2::ggplot() + ggplot2::geom_sf(data = map, fill = "#f4f4f4") +
ggplot2::geom_sf(data = states, fill = ggplot2::alpha("#f4f4f4", 0))
# Read in files
if(is.data.frame(dat) == TRUE){
Div_mat <- dat
}
else if(is.character(dat) == TRUE){
Div_mat <- utils::read.csv(dat)
}
else{
stop("Please supply a dataframe or .csv file name for analysis")
}
Locs <- Div_mat[,4:5]
### Get coordinate ranges for our data
Lat_Min <- min(Div_mat$Latitude) - Lat_buffer
Lat_Max <- max(Div_mat$Latitude) + Lat_buffer
Long_Min <- min(Div_mat$Longitude) - Long_buffer
Long_Max <- max(Div_mat$Longitude) + Long_buffer
# Set colors
# Set breaks
if(missing(col)){
col <- c('#4575b4','#ffffbf','#d73027')
}
if(is.null(breaks) == TRUE){
Breaks <- summary(Div_mat[,1])
Breaks <- as.numeric(Breaks[1:5])
}
else{
Breaks <- breaks
Breaks <- as.numeric(Breaks)
}
Breaks <- round(Breaks,2)
### Heterozygosity Map
# Map it with colored points
Div_map <- base_map + ggplot2::coord_sf(xlim = c(Long_Min, Long_Max),  ylim = c(Lat_Min, Lat_Max)) +
ggplot2::geom_point(data = Div_mat, ggplot2::aes(x = .data$Longitude, y = .data$Latitude, color = Div_mat[,1]), shape = 19, size = 3) +
ggplot2::scale_color_gradient2(low = col[1], mid = col[2], high = col[3], midpoint = mean(Div_mat[,1]), breaks = Breaks, name = statistic) +
ggplot2::theme(panel.grid=ggplot2::element_blank(), legend.position = "right") +
ggplot2::xlab('Longitude') + ggplot2::ylab('Latitude')
Output <- list(Div_map, Div_mat)
names(Output) <- c(paste(statistic," Map", sep = ""), "Plotting Dataframe")
return(Output)
}
Test <- Point_map(Het_dat, statistic = "Heterozygosity")
Test$`Heterozygosity Map`
#' @importFrom rlang .data
#'
#' @export
#'
#' @examples
#' \donttest{
#' data(Het_dat)
#' Test_het <- Point_map(dat = Het_dat, plot.type = 'all',
#' statistic = "Heterozygosity",
#' Lat_buffer = 1, Long_buffer = 1, write = FALSE, prefix = 'Test_het')}
Point_map <- function(dat, statistic, breaks = NULL, col, Lat_buffer = 1, Long_buffer = 1){
Long <- Lat <- x <- y <- z <- alpha <- world <- NULL
################### Get the data for mapping
# Get map data
map <- spData::world["continent"]
states <- spData::us_states["REGION"]
### Make a base map for the countries of interest
base_map <- ggplot2::ggplot() + ggplot2::geom_sf(data = map, fill = "#f4f4f4") +
ggplot2::geom_sf(data = states, fill = ggplot2::alpha("#f4f4f4", 0))
# Read in files
if(is.data.frame(dat) == TRUE){
Div_mat <- dat
}
else if(is.character(dat) == TRUE){
Div_mat <- utils::read.csv(dat)
}
else{
stop("Please supply a dataframe or .csv file name for analysis")
}
Locs <- Div_mat[,4:5]
### Get coordinate ranges for our data
Lat_Min <- min(Div_mat$Latitude) - Lat_buffer
Lat_Max <- max(Div_mat$Latitude) + Lat_buffer
Long_Min <- min(Div_mat$Longitude) - Long_buffer
Long_Max <- max(Div_mat$Longitude) + Long_buffer
# Set colors
# Set breaks
if(missing(col)){
col <- c('#4575b4','#fdae61','#d73027')
}
if(is.null(breaks) == TRUE){
Breaks <- summary(Div_mat[,1])
Breaks <- as.numeric(Breaks[1:5])
}
else{
Breaks <- breaks
Breaks <- as.numeric(Breaks)
}
Breaks <- round(Breaks,2)
### Heterozygosity Map
# Map it with colored points
Div_map <- base_map + ggplot2::coord_sf(xlim = c(Long_Min, Long_Max),  ylim = c(Lat_Min, Lat_Max)) +
ggplot2::geom_point(data = Div_mat, ggplot2::aes(x = .data$Longitude, y = .data$Latitude, color = Div_mat[,1]), shape = 19, size = 3) +
ggplot2::scale_color_gradient2(low = col[1], mid = col[2], high = col[3], midpoint = mean(Div_mat[,1]), breaks = Breaks, name = statistic) +
ggplot2::theme(panel.grid=ggplot2::element_blank(), legend.position = "right") +
ggplot2::xlab('Longitude') + ggplot2::ylab('Latitude')
Output <- list(Div_map, Div_mat)
names(Output) <- c(paste(statistic," Map", sep = ""), "Plotting Dataframe")
return(Output)
}
Test <- Point_map(Het_dat, statistic = "Heterozygosity")
Test$`Heterozygosity Map`
#' @importFrom rlang .data
#'
#' @export
#'
#' @examples
#' \donttest{
#' data(Het_dat)
#' Test_het <- Point_map(dat = Het_dat, plot.type = 'all',
#' statistic = "Heterozygosity",
#' Lat_buffer = 1, Long_buffer = 1, write = FALSE, prefix = 'Test_het')}
Point_map <- function(dat, statistic, breaks = NULL, col, Lat_buffer = 1, Long_buffer = 1){
Long <- Lat <- x <- y <- z <- alpha <- world <- NULL
################### Get the data for mapping
# Get map data
map <- spData::world["continent"]
states <- spData::us_states["REGION"]
### Make a base map for the countries of interest
base_map <- ggplot2::ggplot() + ggplot2::geom_sf(data = map, fill = "#f4f4f4") +
ggplot2::geom_sf(data = states, fill = ggplot2::alpha("#f4f4f4", 0))
# Read in files
if(is.data.frame(dat) == TRUE){
Div_mat <- dat
}
else if(is.character(dat) == TRUE){
Div_mat <- utils::read.csv(dat)
}
else{
stop("Please supply a dataframe or .csv file name for analysis")
}
Locs <- Div_mat[,4:5]
### Get coordinate ranges for our data
Lat_Min <- min(Div_mat$Latitude) - Lat_buffer
Lat_Max <- max(Div_mat$Latitude) + Lat_buffer
Long_Min <- min(Div_mat$Longitude) - Long_buffer
Long_Max <- max(Div_mat$Longitude) + Long_buffer
# Set colors
# Set breaks
if(missing(col)){
col <- c('#313695','#fee090','#a50026')
}
if(is.null(breaks) == TRUE){
Breaks <- summary(Div_mat[,1])
Breaks <- as.numeric(Breaks[1:5])
}
else{
Breaks <- breaks
Breaks <- as.numeric(Breaks)
}
Breaks <- round(Breaks,2)
### Heterozygosity Map
# Map it with colored points
Div_map <- base_map + ggplot2::coord_sf(xlim = c(Long_Min, Long_Max),  ylim = c(Lat_Min, Lat_Max)) +
ggplot2::geom_point(data = Div_mat, ggplot2::aes(x = .data$Longitude, y = .data$Latitude, color = Div_mat[,1]), shape = 19, size = 3) +
ggplot2::scale_color_gradient2(low = col[1], mid = col[2], high = col[3], midpoint = mean(Div_mat[,1]), breaks = Breaks, name = statistic) +
ggplot2::theme(panel.grid=ggplot2::element_blank(), legend.position = "right") +
ggplot2::xlab('Longitude') + ggplot2::ylab('Latitude')
Output <- list(Div_map, Div_mat)
names(Output) <- c(paste(statistic," Map", sep = ""), "Plotting Dataframe")
return(Output)
}
Test$`Heterozygosity Map`
Test <- Point_map(Het_dat, statistic = "Heterozygosity")
Test$`Heterozygosity Map`
#' @importFrom rlang .data
#'
#' @export
#'
#' @examples
#' \donttest{
#' data(Het_dat)
#' Test_het <- Point_map(dat = Het_dat, plot.type = 'all',
#' statistic = "Heterozygosity",
#' Lat_buffer = 1, Long_buffer = 1, write = FALSE, prefix = 'Test_het')}
Point_map <- function(dat, statistic, breaks = NULL, col, Lat_buffer = 1, Long_buffer = 1){
Long <- Lat <- x <- y <- z <- alpha <- world <- NULL
################### Get the data for mapping
# Get map data
map <- spData::world["continent"]
states <- spData::us_states["REGION"]
### Make a base map for the countries of interest
base_map <- ggplot2::ggplot() + ggplot2::geom_sf(data = map, fill = "#f4f4f4") +
ggplot2::geom_sf(data = states, fill = ggplot2::alpha("#f4f4f4", 0))
# Read in files
if(is.data.frame(dat) == TRUE){
Div_mat <- dat
}
else if(is.character(dat) == TRUE){
Div_mat <- utils::read.csv(dat)
}
else{
stop("Please supply a dataframe or .csv file name for analysis")
}
Locs <- Div_mat[,4:5]
### Get coordinate ranges for our data
Lat_Min <- min(Div_mat$Latitude) - Lat_buffer
Lat_Max <- max(Div_mat$Latitude) + Lat_buffer
Long_Min <- min(Div_mat$Longitude) - Long_buffer
Long_Max <- max(Div_mat$Longitude) + Long_buffer
# Set colors
# Set breaks
if(missing(col)){
col <- c('#4575b4','#fee090','#d73027')
}
if(is.null(breaks) == TRUE){
Breaks <- summary(Div_mat[,1])
Breaks <- as.numeric(Breaks[1:5])
}
else{
Breaks <- breaks
Breaks <- as.numeric(Breaks)
}
Breaks <- round(Breaks,2)
### Heterozygosity Map
# Map it with colored points
Div_map <- base_map + ggplot2::coord_sf(xlim = c(Long_Min, Long_Max),  ylim = c(Lat_Min, Lat_Max)) +
ggplot2::geom_point(data = Div_mat, ggplot2::aes(x = .data$Longitude, y = .data$Latitude, color = Div_mat[,1]), shape = 19, size = 3, color = "black") +
ggplot2::scale_color_gradient2(low = col[1], mid = col[2], high = col[3], midpoint = mean(Div_mat[,1]), breaks = Breaks, name = statistic) +
ggplot2::theme(panel.grid=ggplot2::element_blank(), legend.position = "right") +
ggplot2::xlab('Longitude') + ggplot2::ylab('Latitude')
Output <- list(Div_map, Div_mat)
names(Output) <- c(paste(statistic," Map", sep = ""), "Plotting Dataframe")
return(Output)
}
Test <- Point_map(Het_dat, statistic = "Heterozygosity")
Test$`Heterozygosity Map`
#' @importFrom rlang .data
#'
#' @export
#'
#' @examples
#' \donttest{
#' data(Het_dat)
#' Test_het <- Point_map(dat = Het_dat, plot.type = 'all',
#' statistic = "Heterozygosity",
#' Lat_buffer = 1, Long_buffer = 1, write = FALSE, prefix = 'Test_het')}
Point_map <- function(dat, statistic, breaks = NULL, col, Lat_buffer = 1, Long_buffer = 1){
Long <- Lat <- x <- y <- z <- alpha <- world <- NULL
################### Get the data for mapping
# Get map data
map <- spData::world["continent"]
states <- spData::us_states["REGION"]
### Make a base map for the countries of interest
base_map <- ggplot2::ggplot() + ggplot2::geom_sf(data = map, fill = "#f4f4f4") +
ggplot2::geom_sf(data = states, fill = ggplot2::alpha("#f4f4f4", 0))
# Read in files
if(is.data.frame(dat) == TRUE){
Div_mat <- dat
}
else if(is.character(dat) == TRUE){
Div_mat <- utils::read.csv(dat)
}
else{
stop("Please supply a dataframe or .csv file name for analysis")
}
Locs <- Div_mat[,4:5]
### Get coordinate ranges for our data
Lat_Min <- min(Div_mat$Latitude) - Lat_buffer
Lat_Max <- max(Div_mat$Latitude) + Lat_buffer
Long_Min <- min(Div_mat$Longitude) - Long_buffer
Long_Max <- max(Div_mat$Longitude) + Long_buffer
# Set colors
# Set breaks
if(missing(col)){
col <- c('#4575b4','#fee090','#d73027')
}
if(is.null(breaks) == TRUE){
Breaks <- summary(Div_mat[,1])
Breaks <- as.numeric(Breaks[1:5])
}
else{
Breaks <- breaks
Breaks <- as.numeric(Breaks)
}
Breaks <- round(Breaks,2)
### Heterozygosity Map
# Map it with colored points
Div_map <- base_map + ggplot2::coord_sf(xlim = c(Long_Min, Long_Max),  ylim = c(Lat_Min, Lat_Max)) +
ggplot2::geom_point(data = Div_mat, ggplot2::aes(x = .data$Longitude, y = .data$Latitude, color = Div_mat[,1]), shape = 19, size = 3) +
ggplot2::scale_color_gradient2(low = col[1], mid = col[2], high = col[3], midpoint = mean(Div_mat[,1]), breaks = Breaks, name = statistic) +
ggplot2::theme(panel.grid=ggplot2::element_blank(), legend.position = "right") +
ggplot2::xlab('Longitude') + ggplot2::ylab('Latitude')
Output <- list(Div_map, Div_mat)
names(Output) <- c(paste(statistic," Map", sep = ""), "Plotting Dataframe")
return(Output)
}
Test <- Point_map(Het_dat, statistic = "Heterozygosity")
Test$`Heterozygosity Map`
library(devtools)
document()
