build_site_github_pages()
library(devtools)
Test <- 'Test.geno'
Test_vcf <- 'Test.vcf'
tools::file_ext(Test)
tools::file_ext(Test_vcf)
tools::file_ext(Test_vcf)
tools::file_ext(Test_vcf) == 'vc'
tools::file_ext(Test_vcf) == 'vcf'
data("HornedLizard_VCF")
Gen <- vcfR::vcfR2genind(HornedLizard_VCF)
adegenet::ploidy(Genind)
adegenet::ploidy(Gen)
adegenet::ploidy(Gen) <- 2
adegenet::ploidy(Gen)
adegenet::ploidy(Gen) <- 1
adegenet::ploidy(Gen)
adegenet::ploidy(Gen) <- 2
adegenet::ploidy(Gen)
rownamesGen@tab
rownames(Gen@tab)
data("HornedLizard_Pop")
Genind <- Gen
identical(rownames(Genind@tab), P[,1])
identical(rownames(Genind@tab), HornedLizard_Pop[,1])
any(rownames(Genind@tab) != P[,1])
P <- HornedLizard_Pop
any(rownames(Genind@tab) != P[,1])
paste(rownames(Genind@tab)[!(rownames(Genind@tab) != P[,1])], collapse = ' '))
paste(rownames(Genind@tab)[!(rownames(Genind@tab) != P[,1])], collapse = ' ')
paste(rownames(Genind@tab)[(!(rownames(Genind@tab) != P[,1])], collapse = ' ')
paste(rownames(Genind@tab)[rownames(Genind@tab) != P[,1]], collapse = ' ')
paste(rownames(Genind@tab)[rownames(Genind@tab) == P[,1]], collapse = ' ')
paste(rownames(Genind@tab)[(rownames(Genind@tab) != P[,1])], collapse = ' ')
!is.null(Test)
is.null(Test)
# Make an genind object and convert to format for heterozygosity calculations
Hstat <- hierfstat::genind2hierfstat(Genind)
Genind$pop <- as.factor(P$Population)
# Make an genind object and convert to format for heterozygosity calculations
Hstat <- hierfstat::genind2hierfstat(Genind)
View(Hstat)
Genind@tab
Test <- Genind@tab
View(Test)
Dat <- Genind@tab
View(Dat)
gt <- extract.gt(HornedLizard_VCF)
gt <- vcfR::extract.gt(HornedLizard_VCF)
View(gt)
gt[gt == "0/0"] <- 0
gt[gt == "0/1" | gt == "1/0"] <- 1
gt[gt == "01/1"] <- 2
gt2 <- vcfR::extract.gt(HornedLizard_VCF)
View(gt2)
View(gt)
gt[gt == "1/1"] <- 2
View(Dat)
Dat <- t(as.numeric(gt))
View(Dat)
Dat <- as.numeric(gt)
Dat <- as.numeric(as.data.frame(gt))
Dat <- as.matrix.data.frame(gt)
View(Dat)
Dat <- as.matrix(gt)
Dat <- as.numeric(as.matrix(gt))
Dat <- as.data.frame(as.matrix(gt))
View(Dat)
Dat <- t(as.data.frame(as.matrix(gt)))
Dat <- sapply(Dat, as.numeric)
Dat <- t(as.data.frame(as.matrix(gt)))
Dat <- as.data.frame(sapply(Dat, as.numeric))
Dat <- t(as.data.frame(as.matrix(gt)))
View(Dat)
Dat <- t(as.matrix(gt))
Dat <- as.data.frame(t(as.matrix(gt)))
View(Dat)
Dat <- as.data.frame(sapply(Dat, as.numeric))
View(Dat)
Dat <- as.data.frame(t(as.matrix(gt)))
Dat <- sapply(Dat, as.numeric)
Dat <- as.data.frame(t(as.matrix(gt)))
# Preserve individual names
Inds <- rownames(Dat)
Dat <- sapply(Dat, as.numeric)
P <- as.factor(P$Population)
Dat <- cbind(Inds, P, Dat)
P <- HornedLizard_Pop
View(P)
P <- P$Population
Dat <- cbind(Inds, P, Dat)
Dat <- as.data.frame(t(as.matrix(gt)))
# Preserve individual names
Inds <- rownames(Dat)
Dat <- sapply(Dat, as.numeric)
Dat <- cbind(Inds, P, Dat)
View(Dat)
View(Dat)
paste(Dat[,1][(Dat[,1] != P[,1])], collapse = ' '))
paste(Dat[,1][(Dat[,1] != P[,1])], collapse = ' ')
P <- HornedLizard_Pop
paste(Dat[,1][(Dat[,1] != P[,1])], collapse = ' ')
paste(Dat[,1][(Dat[,1] == P[,1])], collapse = ' ')
if(any(Dat[,1] != P[,1])){
warning("Sample names in the VCF and Population file may not be in the same order or samples are missing,
The sample(s) in question are: ",
print(paste(Dat[,1][(Dat[,1] != P[,1])], collapse = ' ')))  }
if(any(Dat[,1] != P[,1])){
warning("Sample names in the VCF and Population file may not be in the same order or samples are missing,
The sample(s) in question are: ",
print(paste(Dat[,1][(Dat[,1] == P[,1])], collapse = ' ')))  }
if(any(Dat[,1] == P[,1])){
warning("Sample names in the VCF and Population file may not be in the same order or samples are missing,
The sample(s) in question are: ",
print(paste(Dat[,1][(Dat[,1] == P[,1])], collapse = ' ')))  }
count(Dat[3:ncol(Dat)] == 1)/nrow(Dat)
#######################################
##### Heterozygosity calculations #####
#######################################
Het <- colSUms(Dat[3:ncol(Dat)] == 1)/nrow(Dat)
#######################################
##### Heterozygosity calculations #####
#######################################
Het <- colSums(Dat[3:ncol(Dat)] == 1)/nrow(Dat)
colSums(Dat[,3] == 1)
View(Dat)
Dat[,3:ncol(Dat)] <- sapply(Dat[,3:ncol(Dat)], as.numeric)
colSums(Dat[,3] == 1)
colSums(Dat[3])
Dat[,3:ncol(Dat)] <- sapply(Dat[,3:ncol(Dat)], as.numeric)
View(Dat)
Dat <- as.data.frame(t(as.matrix(gt)))
# Preserve individual names
Inds <- rownames(Dat)
Dat <- sapply(Dat, as.numeric)
Dat <- cbind(Inds, P, Dat)
View(Dat)
Dat <- as.data.frame(t(as.matrix(gt)))
# Preserve individual names
Inds <- rownames(Dat)
Dat <- sapply(Dat, as.numeric)
Dat <- cbind(Inds, P$Population, Dat)
Dat[,3:ncol(Dat)] <- sapply(Dat[,3:ncol(Dat)], as.numeric)
Dat[,3:ncol(Dat)] <- apply(Dat[,3:ncol(Dat)], 2, as.numeric)
Dat[,3:ncol(Dat)] <- apply(Dat[3:ncol(Dat)], 2, as.numeric)
Dat[,3:ncol(Dat)] <- apply(Dat[3:ncol(Dat)], 1, as.numeric)
Dat[3:ncol(Dat)] <- apply(Dat[3:ncol(Dat)], 1, as.numeric)
Dat[3:ncol(Dat)] <- apply(Dat[3:ncol(Dat)], 2, as.numeric)
Dat[,3:ncol(Dat)] <- mapply(Dat[,3:ncol(Dat)], 2, as.numeric)
Dat[,3:ncol(Dat)] <- mapply(Dat[,3:ncol(Dat)], as.numeric)
Dat[s3:ncol(Dat)] <- sapply(Dat[3:ncol(Dat)], as.numeric)
Dat[3:ncol(Dat)] <- sapply(Dat[3:ncol(Dat)], as.numeric)
Dat <- as.data.frame(t(as.matrix(gt)))
# Preserve individual names
Inds <- rownames(Dat)
Dat <- sapply(Dat, as.numeric)
Dat <- cbind(Inds, P$Population, Dat)
Dat[3:ncol(Dat)] <- sapply(Dat[3:ncol(Dat)], as.numeric)
View(Dat)
Dat <- as.data.frame(t(as.matrix(gt)))
# Preserve individual names
Inds <- rownames(Dat)
Dat <- sapply(Dat, as.numeric)
Dat <- cbind(Inds, P$Population, Dat)
Dat[,3:ncol(Dat)] <- sapply(Dat[,3:ncol(Dat)], as.numeric)
Dat[,3:ncol(Dat)] <- sapply(Dat[3:ncol(Dat)], as.numeric)
Dat <- as.data.frame(t(as.matrix(gt)))
# Preserve individual names
Inds <- rownames(Dat)
Dat <- sapply(Dat, as.numeric)
Dat <- cbind.data.frame(Inds, P$Population, Dat)
colSums(Dat[3] == 1)
colSums(Dat[3] != 1)
table(Dat[,3])
colSums(Dat[3:ncol(Dat)] != 1)/nrow(Dat)
#######################################
##### Heterozygosity calculations #####
#######################################
# Find homozygotes
Het <- 1-(colSums(Dat[3:ncol(Dat)] != 1)/nrow(Dat))
Het
ObsHet_perloc <- 1-(colSums(Dat[3:ncol(Dat)] != 1)/nrow(Dat))
ObsHet_avg <- mean(ObsHet_perloc)
return(ObsHet_avg, ObsHet_perloc)}
Het <- function(Dat){
ObsHet_perloc <- 1-(colSums(Dat[3:ncol(Dat)] != 1)/nrow(Dat))
ObsHet_avg <- mean(ObsHet_perloc)
return(ObsHet_avg, ObsHet_perloc)
}
unique(P$Population)
for(i in unique(P$Population)){
Dat_perpop[[i]] <- Dat[which(Dat[,2] == i),]
}
# Break into list with populations for each element
Dat_perpop <- list()
for(i in unique(P$Population)){
Dat_perpop[[i]] <- Dat[which(Dat[,2] == i),]
}
View(Dat_perpop)
table(Dat$`P$Population`)
ObsHet_res  <- lapply(Dat_perpop, ObsHet)
#######################################
##### Heterozygosity calculations #####
#######################################
# Find observed heterozygosity (1-homozygosity)
ObsHet <- function(Dat){
ObsHet_perloc <- 1-(colSums(Dat[3:ncol(Dat)] != 1)/nrow(Dat))
ObsHet_avg <- mean(ObsHet_perloc)
return(ObsHet_avg, ObsHet_perloc)
}
ObsHet_res  <- lapply(Dat_perpop, ObsHet)
#######################################
##### Heterozygosity calculations #####
#######################################
# Find observed heterozygosity (1-homozygosity)
ObsHet <- function(Dat){
ObsHet_perloc <- 1-(colSums(Dat[3:ncol(Dat)] != 1)/nrow(Dat))
ObsHet_avg <- mean(ObsHet_perloc)
return(ObsHet_perloc)
}
ObsHet_res  <- lapply(Dat_perpop, ObsHet)
View(ObsHet_res)
ObsHet_res_perloc  <- lapply(Dat_perpop, ObsHet)
Obs_Het_res_avg <- lapply(ObsHet_res_perloc, mean)
View(Obs_Het_res_avg)
Hstat <- hierfstat::genind2hierfstat(Genind)
BS <- basic.stat(Hstat)
BS <- hierfstats::basic.stats(Hstat)
BS <- hierfstat::::basic.stats(Hstat)
BS <- hierfstat::basic.stats(Hstat)
View(BS)
BS$Ho
BS$overall
colMeans(BS$Ho)
p <- (colSums(Dat[3:ncol(Dat)]== 0)*2) + colSums(Dat[3:ncol(Dat)]== 1)/nrow(Dat)
q <- (colSums(Dat[3:ncol(Dat)]== 2)*2) + colSums(Dat[3:ncol(Dat)]== 1)/nrow(Dat)
p <- (colSums(Dat[3:ncol(Dat)]== 0)*2) + colSums(Dat[3:ncol(Dat)]== 1)/(nrow(Dat)*2)
q <- (colSums(Dat[3:ncol(Dat)]== 2)*2) + colSums(Dat[3:ncol(Dat)]== 1)/(nrow(Dat)*2)
p <- ((colSums(Dat[3:ncol(Dat)]== 0)*2) + colSums(Dat[3:ncol(Dat)]== 1))/(nrow(Dat)*2)
q <- ((colSums(Dat[3:ncol(Dat)]== 2)*2) + colSums(Dat[3:ncol(Dat)]== 1))/(nrow(Dat)*2)
table(Dat[,3])
He <- 1-(p^2)-(q^2)
ExpHet_res_perloc  <- lapply(Dat_perpop, ExpHe)
ExpHe <- function(Dat){
p <- ((colSums(Dat[3:ncol(Dat)]== 0)*2) + colSums(Dat[3:ncol(Dat)]== 1))/(nrow(Dat)*2)
q <- ((colSums(Dat[3:ncol(Dat)]== 2)*2) + colSums(Dat[3:ncol(Dat)]== 1))/(nrow(Dat)*2)
He_perloc <- 1-(p^2)-(q^2)
return(He_perloc)
}
ExpHet_res_perloc  <- lapply(Dat_perpop, ExpHe)
View(ExpHet_res_perloc)
View(Dat)
ExpHet_res_avg  <- lapply(ExpHet_res_perloc, mean)
View(ExpHet_res_avg)
data("HornedLizard_VCF"
)
data("HornedLizard_Pop")
Day <- HornedLizard_VCF
Dat <- HornedLizard_VCF
remove(Day)
# Convert the vcf gt slot to a geno style table for calculations
gt <- vcfR::extract.gt(Dat, return.alleles = TRUE)
Dat <- as.data.frame(t(as.matrix(gt)))
# Preserve individual names
Inds <- rownames(Dat)
P <- as.factor(HornedLizard_Pop$Population)
length(P)
Dat <- cbind.data.frame(Inds, P, Dat)
View(Dat)
# Break into list with populations for each element
Dat_perpop <- list()
for(i in unique(P)){
Dat_perpop[[i]] <- Dat[which(Dat[,2] == i),]
}
message('Formatting has finished, moving onto calculations')
Uniq_alleles <- function(x) {
tmp_res <- list()
for(i in 3:ncol(x)){
tmp <- unique(unlist(strsplit(x[,i], split = '/')))
tmp_res[[i]] <- tmp
remove(tmp)
}
tmp_res <- as.data.frame(do.call("rbind", tmp_res))
rownames(tmp_res) <- colnames(x[3:ncol(x)])
return(tmp_res)
}
PA_perpop <- lapply(Dat_perpop, Uniq_alleles)
PA_perpop <- mapply(cbind, PA_perpop, "Pop"=names(PA_perpop), SIMPLIFY=F)
# Get locus names
locnames <- rownames(PA_perpop[[1]])
PA_test_df <- do.call("rbind", PA_perpop)
PA_test_df$loc <- gsub('^.*\\.', "", rownames(Test))
P_uniq <- unique(P)
PA_test_df$loc <- gsub('^.*\\.', "", rownames(PA_test_df))
P_uniq <- unique(P)
View(PA_test_df)
P_uniq
PA_test <- list()
for(i in 1:length(P_uniq)){
PA <- list()
for(j in 1:length(locnames)){
# Isolate test population
P_test <- PA_test_df[which(PA_test_df$Pop == P_uniq[i]),]
# Isolate remaining populations
Rem_pop <- PA_test_df[-c(which(PA_test_df$Pop == P_uniq[i])),]
# For each allele, find any alleles that are in the population P_test but not the remaining populations (Rem_pop)
Al_1 <- suppressMessages(anti_join(P_test[which(P_test$loc == locnames[j]),c(1,4)], Rem_pop[which(Rem_pop$loc == locnames[j]),c(1,4)]))
Al_2 <- suppressMessages(anti_join(P_test[which(P_test$loc == locnames[j]),c(2,4)], Rem_pop[which(Rem_pop$loc == locnames[j]),c(2,4)]))
colnames(Al_1) <- colnames(Al_2) <- c('Allele', "Locus")
PA_df <- rbind(Al_1, Al_2)
if(nrow(PA_df) != 0){
PA[[i]] <- PA_df
}
}
PA_test[[i]] <- PA
}
library(dplyr)
PA_test <- list()
for(i in 1:length(P_uniq)){
PA <- list()
for(j in 1:length(locnames)){
# Isolate test population
P_test <- PA_test_df[which(PA_test_df$Pop == P_uniq[i]),]
# Isolate remaining populations
Rem_pop <- PA_test_df[-c(which(PA_test_df$Pop == P_uniq[i])),]
# For each allele, find any alleles that are in the population P_test but not the remaining populations (Rem_pop)
Al_1 <- suppressMessages(anti_join(P_test[which(P_test$loc == locnames[j]),c(1,4)], Rem_pop[which(Rem_pop$loc == locnames[j]),c(1,4)]))
Al_2 <- suppressMessages(anti_join(P_test[which(P_test$loc == locnames[j]),c(2,4)], Rem_pop[which(Rem_pop$loc == locnames[j]),c(2,4)]))
colnames(Al_1) <- colnames(Al_2) <- c('Allele', "Locus")
PA_df <- rbind(Al_1, Al_2)
if(nrow(PA_df) != 0){
PA[[i]] <- PA_df
}
}
PA_test[[i]] <- PA
}
View(PA_test)
PA_test <- list()
for(i in 1:length(P_uniq)){
PA <- list()
for(j in 1:length(locnames)){
# Isolate test population
P_test <- PA_test_df[which(PA_test_df$Pop == P_uniq[i]),]
# Isolate remaining populations
Rem_pop <- PA_test_df[-c(which(PA_test_df$Pop == P_uniq[i])),]
# For each allele, find any alleles that are in the population P_test but not the remaining populations (Rem_pop)
Al_1 <- suppressMessages(anti_join(P_test[which(P_test$loc == locnames[j]),c(1,4)], Rem_pop[which(Rem_pop$loc == locnames[j]),c(1,4)]))
Al_2 <- suppressMessages(anti_join(P_test[which(P_test$loc == locnames[j]),c(2,4)], Rem_pop[which(Rem_pop$loc == locnames[j]),c(2,4)]))
colnames(Al_1) <- colnames(Al_2) <- c('Allele', "Locus")
PA_df <- rbind(Al_1, Al_2)
if(nrow(PA_df) != 0){
PA[[i]] <- PA_df
}
}
PA_test[[i]] <- c(PA_test,PA)
}
View(PA_test)
PA_test[[1]]
c(PA_test[[1]],2)
View(PA_test)
PA_test <- list()
PA_test <- list()
for(i in 1:length(P_uniq)){
PA <- list()
for(j in 1:length(locnames)){
# Isolate test population
P_test <- PA_test_df[which(PA_test_df$Pop == P_uniq[i]),]
# Isolate remaining populations
Rem_pop <- PA_test_df[-c(which(PA_test_df$Pop == P_uniq[i])),]
# For each allele, find any alleles that are in the population P_test but not the remaining populations (Rem_pop)
Al_1 <- suppressMessages(anti_join(P_test[which(P_test$loc == locnames[j]),c(1,4)], Rem_pop[which(Rem_pop$loc == locnames[j]),c(1,4)]))
Al_2 <- suppressMessages(anti_join(P_test[which(P_test$loc == locnames[j]),c(2,4)], Rem_pop[which(Rem_pop$loc == locnames[j]),c(2,4)]))
colnames(Al_1) <- colnames(Al_2) <- c('Allele', "Locus")
PA_df <- rbind(Al_1, Al_2)
if(nrow(PA_df) != 0){
PA[[i]] <- PA_df
}
}
PA_test[[i]] <- c(PA_test[[i]],PA)
}
PA_test[1]
PA_test <- list()
for(i in 1:length(P_uniq)){
PA <- list()
for(j in 1:length(locnames)){
# Isolate test population
P_test <- PA_test_df[which(PA_test_df$Pop == P_uniq[i]),]
# Isolate remaining populations
Rem_pop <- PA_test_df[-c(which(PA_test_df$Pop == P_uniq[i])),]
# For each allele, find any alleles that are in the population P_test but not the remaining populations (Rem_pop)
Al_1 <- suppressMessages(anti_join(P_test[which(P_test$loc == locnames[j]),c(1,4)], Rem_pop[which(Rem_pop$loc == locnames[j]),c(1,4)]))
Al_2 <- suppressMessages(anti_join(P_test[which(P_test$loc == locnames[j]),c(2,4)], Rem_pop[which(Rem_pop$loc == locnames[j]),c(2,4)]))
colnames(Al_1) <- colnames(Al_2) <- c('Allele', "Locus")
PA_df <- rbind(Al_1, Al_2)
if(nrow(PA_df) != 0){
PA[[i]] <- PA_df
}
}
PA_test[i] <- PA
}
PA_test <- list()
for(i in 1:length(P_uniq)){
PA <- list()
for(j in 1:length(locnames)){
# Isolate test population
P_test <- PA_test_df[which(PA_test_df$Pop == P_uniq[i]),]
# Isolate remaining populations
Rem_pop <- PA_test_df[-c(which(PA_test_df$Pop == P_uniq[i])),]
# For each allele, find any alleles that are in the population P_test but not the remaining populations (Rem_pop)
Al_1 <- suppressMessages(anti_join(P_test[which(P_test$loc == locnames[j]),c(1,4)], Rem_pop[which(Rem_pop$loc == locnames[j]),c(1,4)]))
Al_2 <- suppressMessages(anti_join(P_test[which(P_test$loc == locnames[j]),c(2,4)], Rem_pop[which(Rem_pop$loc == locnames[j]),c(2,4)]))
colnames(Al_1) <- colnames(Al_2) <- c('Allele', "Locus")
PA_df <- rbind(Al_1, Al_2)
if(nrow(PA_df) != 0){
PA[[i]] <- PA_df
}
}
PA_test[[i]] <- PA
}
View(PA_test)
PA_test <- list()
for(i in 1:length(P_uniq)){
PA <- list()
for(j in 1:length(locnames)){
# Isolate test population
P_test <- PA_test_df[which(PA_test_df$Pop == P_uniq[i]),]
# Isolate remaining populations
Rem_pop <- PA_test_df[-c(which(PA_test_df$Pop == P_uniq[i])),]
# For each allele, find any alleles that are in the population P_test but not the remaining populations (Rem_pop)
Al_1 <- suppressMessages(anti_join(P_test[which(P_test$loc == locnames[j]),c(1,4)], Rem_pop[which(Rem_pop$loc == locnames[j]),c(1,4)]))
Al_2 <- suppressMessages(anti_join(P_test[which(P_test$loc == locnames[j]),c(2,4)], Rem_pop[which(Rem_pop$loc == locnames[j]),c(2,4)]))
colnames(Al_1) <- colnames(Al_2) <- c('Allele', "Locus")
PA_df <- rbind(Al_1, Al_2)
PA <- PA_df
#if(nrow(PA_df) != 0){
#PA[[i]] <- PA_df
#}
}
PA_test[[i]] <- PA
}
View(PA_test)
PA_test <- list()
for(i in 1:length(P_uniq)){
PA <- list()
for(j in 1:length(locnames)){
# Isolate test population
P_test <- PA_test_df[which(PA_test_df$Pop == P_uniq[i]),]
# Isolate remaining populations
Rem_pop <- PA_test_df[-c(which(PA_test_df$Pop == P_uniq[i])),]
# For each allele, find any alleles that are in the population P_test but not the remaining populations (Rem_pop)
Al_1 <- suppressMessages(anti_join(P_test[which(P_test$loc == locnames[j]),c(1,4)], Rem_pop[which(Rem_pop$loc == locnames[j]),c(1,4)]))
Al_2 <- suppressMessages(anti_join(P_test[which(P_test$loc == locnames[j]),c(2,4)], Rem_pop[which(Rem_pop$loc == locnames[j]),c(2,4)]))
colnames(Al_1) <- colnames(Al_2) <- c('Allele', "Locus")
PA_df <- rbind(Al_1, Al_2)
if(nrow(PA_df) != 0){
PA[[j]] <- PA_df
}
}
PA_test[[i]] <- PA
}
View(PA_test)
names(PA_test) <- P_uniq
View(PA_test)
Test <- do.call(Map, c(f= rbind, PA_test))
PA_test[[1]] <- do.call('rbind', PA_test[[1]])
View(PA_test)
length(PA_test\)
length(PA_test)
PA_test <- list()
for(i in 1:length(P_uniq)){
PA <- list()
for(j in 1:length(locnames)){
# Isolate test population
P_test <- PA_test_df[which(PA_test_df$Pop == P_uniq[i]),]
# Isolate remaining populations
Rem_pop <- PA_test_df[-c(which(PA_test_df$Pop == P_uniq[i])),]
# For each allele, find any alleles that are in the population P_test but not the remaining populations (Rem_pop)
Al_1 <- suppressMessages(anti_join(P_test[which(P_test$loc == locnames[j]),c(1,4)], Rem_pop[which(Rem_pop$loc == locnames[j]),c(1,4)]))
Al_2 <- suppressMessages(anti_join(P_test[which(P_test$loc == locnames[j]),c(2,4)], Rem_pop[which(Rem_pop$loc == locnames[j]),c(2,4)]))
colnames(Al_1) <- colnames(Al_2) <- c('Allele', "Locus")
PA_df <- rbind(Al_1, Al_2)
if(nrow(PA_df) != 0){
PA[[j]] <- PA_df
}
}
PA_test[[i]] <- PA
}
View(PA_test)
names(PA_test) <- P_uniq
for(i in 1:length(PA_test)) {
PA_test[[i]] <- do.call('rbind', PA_test[[i]])
}
View(PA_test)
PA_test[[1]]
PA_test[[2]]
PA_test[[1]]
PA_test[[3]]
# Count the number of private alleles in each population
table(PA_test)
length(PA_test[[1]])
nrow(PA_test[[1]])
# Count the number of private alleles in each population
PA_count <- list()
for(i in 1:length(PA_test)) {
PA_count[[i]] <- nrow(PA_test[[i]])
}
View(PA_count)
names(PA_count) <- names(PA_test)
View(PA_count)
PA_count <- do.call("rbind", PA_count)
colnames(PA_count) <- "Number.Private.Alleles"
View(PA_count)
