step2 <- 1
for(i in step:npops){
index1 <- c(index1, i:npops)
index2 <- c(index2, rep(step2, length(step:npops)))
step=step+1
step2=step2+1
}
combn(Pops)
combn(Pops, m = 2)
combn(levels(Pops), m = 2)
# Get combinations for pairwise comparisons
Comps <- combn(levels(Pops), m = 2)
View(Comps)
# Set r (number of pops)
r <- 2
ninds.dup.1 <- ninds[index1,]
ninds.dup.2 <- ninds[index2,]
View(Dat_perpop)
comps
Comps
length(Comps)
ncol(Comps)
i = 1
which(names(Dat_perpop) == Comps[1,i])
hich(names(Dat_perpop) == Comps[2,i])
which(names(Dat_perpop) == Comps[2,i])
Pop1 <- which(names(Dat_perpop) == Comps[1,i])
Pop2 <- which(names(Dat_perpop) == Comps[2,i])
Pop1 <- Dat_perpop[[which(names(Dat_perpop) == Comps[1,i])]]
Pop2 <- Dat_perpop[[which(names(Dat_perpop) == Comps[2,i])]]
View(ninds.dup.1)
View(ninds)
p1 <- p[index1,]
p2 <- p[index2,]
ind.nomissing <- matrix(nrow = length(Dat_perpop), ncol = length(Dat_perpop[3:ncol(Dat_perpop[[1]])]))
for(i in 1:length(Dat_perpop)){
tmp <- Dat_perpop[[i]]
# Get frequency of alternate alleles
q.freq[i,] <- (((colSums(tmp[3:ncol(tmp)] == 2, na.rm = T))*2) + colSums(tmp[3:ncol(tmp)] == 1, na.rm = T))/(2*colSums(tmp[3:ncol(tmp)] != "NA"))
# Get number of heterozygotes in each population
het.freq[i,] <- colSums(tmp[3:ncol(tmp)] == 1)/colSums(tmp[3:ncol(tmp)] != "NA")
ind.nomissing[i,] <- colSums(tmp[3:ncol(tmp)] != "NA")
}
View(ind.nomissing)
Comps[1,i]
row.names(q.freq) <- row.names(het.freq) <- row.names(ind.nomissing) <- names(Dat_perpop)
i = 1
nPop1 <- ind.nomissing[Comps[1,i]]
nPop2 <- ind.nomissing[Comps[2,i]]
Comps[1,i]
#Pop1 <- Dat_perpop[[which(names(Dat_perpop) == Comps[1,i])]]
#Pop2 <- Dat_perpop[[which(names(Dat_perpop) == Comps[2,i])]]
nPop1 <- ind.nomissing[which(row.names(ind.nomissing == Comps[1,i]),]
nPop1 <- ind.nomissing[which(row.names(ind.nomissing) == Comps[1,i]),]
nPop2 <- ind.nomissing[which(row.names(ind.nomissing) == Comps[2,i]),]
ninds.dup.1 <- ninds[index1,]
ninds.dup.2 <- ninds[index2,]
View(ninds.dup.1)
View(ninds.dup.2)
index1
index2
q1 <- q.freq[which(row.names(q.freq) == Comps[1,i]),]
q2 <- q.freq[which(row.names(q.freq) == Comps[2,i]),]
p1 <- p[index1,]
p2 <- p[index2,]
View(p1)
oh1 <- oh[index1,]
oh2 <- oh[index2,]
h1 <- het.freq[which(row.names(het.freq) == Comps[1,i]),]
h2 <- het.freq[which(row.names(het.freq) == Comps[2,i]),]
n.bar <- (ninds.dup.1+ninds.dup.2)/r
nbar <- (nPop1+nPop2)/r
n.bar[1:10]
nbar[1:10]
nbar <- (nPop1+nPop1+nPop2)/r
nbar[1:10]
nbar <- (nPop1+nPop2+nPop2)/r
nbar[1:10]
nbar <- NULL
View(Pop1)
nPop1
nPop2
View(ninds.dup.1)
View(ninds.dup.2)
for(i in step:npops){
index1 <- c(index1, i:npops)
index2 <- c(index2, rep(step2, length(step:npops)))
step=step+1
step2=step2+1
}
index2 <- index1 <- NULL
step <- 2
step2 <- 1
for(i in step:npops){
index1 <- c(index1, i:npops)
index2 <- c(index2, rep(step2, length(step:npops)))
step=step+1
step2=step2+1
}
r=2
ninds.dup.1 <- ninds[index1,]
ninds.dup.2 <- ninds[index2,]
View(n.bar)
View(ninds.dup.1)
(ninds.dup.1[,1]+ninds.dup.2[,1])/r
nPop1[,1]
nPop1[1]
nPop1[1] + nPop2[1]
index2 <- index1 <- NULL
step <- 2
step2 <- 1
for(i in step:npops){
index1 <- c(index1, i:npops)
index2 <- c(index2, rep(step2, length(step:npops)))
step=step+1
step2=step2+1
}
ninds[index1,]
ninds[index1,1:5]
ind.nomissing[index1,1:5]
unique(Pops)
length(Pops)
length(unique(Pops))
# Use STAMPP's indexing
index2_a <- index1_a <- NULL
step <- 2
step2 <- 1
for(i in step:length(unique(Pops))){
index1_a <- c(index1_a, i:length(unique(Pops)))
index2_a <- c(index2, rep(step2, length(step:length(unique(Pops)))))
step=step+1
step2=step2+1
}
index2_a <- index1_a <- NULL
step <- 2
step2 <- 1
for(i in step:length(unique(Pops))){
index1_a <- c(index1_a, i:length(unique(Pops)))
index2_a <- c(index2_a, rep(step2, length(step:length(unique(Pops)))))
step=step+1
step2=step2+1
}
# Set r (number of pops)
r <- 2
#Pop1 <- Dat_perpop[[which(names(Dat_perpop) == Comps[1,i])]]
#Pop2 <- Dat_perpop[[which(names(Dat_perpop) == Comps[2,i])]]
# Extract the number of individuals, alternate allele frequency, and heterozygote frequency from the populations being compared
nPop1 <- ind.nomissing[index1_a,]
View(nPop1)
nPop2 <- ind.nomissing[index2_a,]
View(nPop2)
q1 <- q.freq[index1_a,]
q2 <- q.freq[index2_a,]
View(q1)
h1 <- het.freq[index1_a,]
h2 <- het.freq[index2_a,]
# Calcualte nbar
nbar <- (nPop1+nPop2)/r
View(n.bar)
View(nbar)
n.bar == nbar
nc <- (r*n.bar)-(((nPop1^2)+(nPop2^2)) / (r*n.bar))
p.bar <- ((nPop1*q1)/(r*n.bar)) + ((nPop2*q2)/(r*n.bar))
s.square <- ((nPop1*((q1-p.bar)^2))/n.bar) + ((nPop2*((q2-p.bar)^2))/n.bar)
h.bar <- ((nPop1*h1)/(r*n.bar)) + ((nPop2*h2)/(r*n.bar))
a <- (n.bar/nc) * (s.square - (1/(n.bar-1)) * ( (p.bar*(1-p.bar)) - (((r-1)/r)*s.square) - ((1/4)*h.bar) ))
b <- (n.bar/(n.bar-1)) * ( (p.bar*(1-p.bar)) - (((r-1)/r)*s.square) - (((2*n.bar-1)/(4*n.bar))*h.bar))
c <- (1/2)*h.bar
any(a) == !is.finite()
any(a == !is.finite())
is.infinite(a)
which(is.infinite(a))
is.finite(a)
any(is.finite(a) == FALSE
)
!is.finite(a)
Fst <- function(Dat){
# Dat is the Dat_perpop object
# Create a couple of matrices to store data
ind.nomissing <- matrix(nrow = length(Dat), ncol = length(Dat[3:ncol(Dat[[1]])]))
q.freq <- matrix(nrow = length(Dat), ncol = length(Dat[3:ncol(Dat[[1]])]))
het.freq <- matrix(nrow = length(Dat), ncol = length(Dat[3:ncol(Dat[[1]])]))
# Calculate the alternate allele frequency and the frequency of heterozygotes per population per locus
for(i in 1:length(Dat)){
tmp <- Dat[[i]]
# Get frequency of alternate alleles
q.freq[i,] <- (((colSums(tmp[3:ncol(tmp)] == 2, na.rm = T))*2) + colSums(tmp[3:ncol(tmp)] == 1, na.rm = T))/(2*colSums(tmp[3:ncol(tmp)] != "NA"))
# Get number of heterozygotes in each population
het.freq[i,] <- colSums(tmp[3:ncol(tmp)] == 1)/colSums(tmp[3:ncol(tmp)] != "NA")
# Get the number of individuals with data
ind.nomissing[i,] <- colSums(tmp[3:ncol(tmp)] != "NA")
}
# Set the names of the matrices
row.names(q.freq) <- row.names(het.freq) <- row.names(ind.nomissing) <- names(Dat)
# Use StamPP's indexing
index2_a <- index1_a <- NULL
step <- 2
step2 <- 1
for(i in step:length(unique(Pops))){
index1_a <- c(index1_a, i:length(unique(Pops)))
index2_a <- c(index2_a, rep(step2, length(step:length(unique(Pops)))))
step=step+1
step2=step2+1
}
# Set r (number of pops)
r <- 2
nPop1 <- ind.nomissing[index1_a,]
nPop2 <- ind.nomissing[index2_a,]
q1 <- q.freq[index1_a,]
q2 <- q.freq[index2_a,]
h1 <- het.freq[index1_a,]
h2 <- het.freq[index2_a,]
### WC Fst
# Calculate nbar
n.bar <- (nPop1+nPop2)/r
nc <- (r*n.bar)-(((nPop1^2)+(nPop2^2)) / (r*n.bar))
p.bar <- ((nPop1*q1)/(r*n.bar)) + ((nPop2*q2)/(r*n.bar))
s.square <- ((nPop1*((q1-p.bar)^2))/n.bar) + ((nPop2*((q2-p.bar)^2))/n.bar)
h.bar <- ((nPop1*h1)/(r*n.bar)) + ((nPop2*h2)/(r*n.bar))
a <- (n.bar/nc) * (s.square - (1/(n.bar-1)) * ( (p.bar*(1-p.bar)) - (((r-1)/r)*s.square) - ((1/4)*h.bar) ))
b <- (n.bar/(n.bar-1)) * ( (p.bar*(1-p.bar)) - (((r-1)/r)*s.square) - (((2*n.bar-1)/(4*n.bar))*h.bar))
c <- (1/2)*h.bar
# a, b, and c can be infinite, we will set these values to NA
if(!is.finite(a) | !is.finite(b) | !is.finite(c)){
a[which(is.infinite(a))] <- NA
b[which(is.infinite(b))] <- NA
c[which(is.infinite(c))] <- NA
}
if(ncol(q.freq)>1){ #if there is more than 1 locus in the genotype dataset
if(length(unique(Pops))>2){ #if there are greater than 2 populations, ie. greater than 1 pairwise comparision
fst <- rowSums(a, na.rm=TRUE) / (rowSums(a, na.rm=TRUE) + rowSums(b, na.rm=TRUE) + rowSums(c, na.rm=TRUE)) #Fst results
}else{ #if there is only 2 populations, ie. 1 pairwise comparision
fst <- sum(a, na.rm=TRUE) / (sum(a, na.rm=TRUE) + sum(b, na.rm=TRUE) + sum(c, na.rm=TRUE)) #Fst results
}
}else{ # if there is only 1 locus in the genotype dataset
fst <- a/(a+b+c) #Fst results
}
}
Fst_wc <- Fst(Dat_perpop)
Fst <- function(Dat){
# Dat is the Dat_perpop object
# Create a couple of matrices to store data
ind.nomissing <- matrix(nrow = length(Dat), ncol = length(Dat[3:ncol(Dat[[1]])]))
q.freq <- matrix(nrow = length(Dat), ncol = length(Dat[3:ncol(Dat[[1]])]))
het.freq <- matrix(nrow = length(Dat), ncol = length(Dat[3:ncol(Dat[[1]])]))
# Calculate the alternate allele frequency and the frequency of heterozygotes per population per locus
for(i in 1:length(Dat)){
tmp <- Dat[[i]]
# Get frequency of alternate alleles
q.freq[i,] <- (((colSums(tmp[3:ncol(tmp)] == 2, na.rm = T))*2) + colSums(tmp[3:ncol(tmp)] == 1, na.rm = T))/(2*colSums(tmp[3:ncol(tmp)] != "NA"))
# Get number of heterozygotes in each population
het.freq[i,] <- colSums(tmp[3:ncol(tmp)] == 1)/colSums(tmp[3:ncol(tmp)] != "NA")
# Get the number of individuals with data
ind.nomissing[i,] <- colSums(tmp[3:ncol(tmp)] != "NA")
}
# Set the names of the matrices
row.names(q.freq) <- row.names(het.freq) <- row.names(ind.nomissing) <- names(Dat)
# Use StamPP's indexing
index2_a <- index1_a <- NULL
step <- 2
step2 <- 1
for(i in step:length(unique(Pops))){
index1_a <- c(index1_a, i:length(unique(Pops)))
index2_a <- c(index2_a, rep(step2, length(step:length(unique(Pops)))))
step=step+1
step2=step2+1
}
# Set r (number of pops)
r <- 2
nPop1 <- ind.nomissing[index1_a,]
nPop2 <- ind.nomissing[index2_a,]
q1 <- q.freq[index1_a,]
q2 <- q.freq[index2_a,]
h1 <- het.freq[index1_a,]
h2 <- het.freq[index2_a,]
### WC Fst
# Calculate nbar
n.bar <- (nPop1+nPop2)/r
nc <- (r*n.bar)-(((nPop1^2)+(nPop2^2)) / (r*n.bar))
p.bar <- ((nPop1*q1)/(r*n.bar)) + ((nPop2*q2)/(r*n.bar))
s.square <- ((nPop1*((q1-p.bar)^2))/n.bar) + ((nPop2*((q2-p.bar)^2))/n.bar)
h.bar <- ((nPop1*h1)/(r*n.bar)) + ((nPop2*h2)/(r*n.bar))
a <- (n.bar/nc) * (s.square - (1/(n.bar-1)) * ( (p.bar*(1-p.bar)) - (((r-1)/r)*s.square) - ((1/4)*h.bar) ))
b <- (n.bar/(n.bar-1)) * ( (p.bar*(1-p.bar)) - (((r-1)/r)*s.square) - (((2*n.bar-1)/(4*n.bar))*h.bar))
c <- (1/2)*h.bar
# a, b, and c can be infinite, we will set these values to NA
if(any(is.finite(a) == FALSE) | any(is.finite(b) == FALSE) | any(is.finite(c) == FALSE)){
a[which(is.infinite(a))] <- NA
b[which(is.infinite(b))] <- NA
c[which(is.infinite(c))] <- NA
}
if(ncol(q.freq)>1){ #if there is more than 1 locus in the genotype dataset
if(length(unique(Pops))>2){ #if there are greater than 2 populations, ie. greater than 1 pairwise comparision
fst <- rowSums(a, na.rm=TRUE) / (rowSums(a, na.rm=TRUE) + rowSums(b, na.rm=TRUE) + rowSums(c, na.rm=TRUE)) #Fst results
}else{ #if there is only 2 populations, ie. 1 pairwise comparision
fst <- sum(a, na.rm=TRUE) / (sum(a, na.rm=TRUE) + sum(b, na.rm=TRUE) + sum(c, na.rm=TRUE)) #Fst results
}
}else{ # if there is only 1 locus in the genotype dataset
fst <- a/(a+b+c) #Fst results
}
return(fst)
}
Fst_wc <- Fst(Dat_perpop)
Fst_wc
Fst <- function(Dat){
# Dat is the Dat_perpop object
# Create a couple of matrices to store data
ind.nomissing <- matrix(nrow = length(Dat), ncol = length(Dat[3:ncol(Dat[[1]])]))
q.freq <- matrix(nrow = length(Dat), ncol = length(Dat[3:ncol(Dat[[1]])]))
het.freq <- matrix(nrow = length(Dat), ncol = length(Dat[3:ncol(Dat[[1]])]))
# Calculate the alternate allele frequency and the frequency of heterozygotes per population per locus
for(i in 1:length(Dat)){
tmp <- Dat[[i]]
# Get frequency of alternate alleles
q.freq[i,] <- (((colSums(tmp[3:ncol(tmp)] == 2, na.rm = T))*2) + colSums(tmp[3:ncol(tmp)] == 1, na.rm = T))/(2*colSums(tmp[3:ncol(tmp)] != "NA"))
# Get number of heterozygotes in each population
het.freq[i,] <- colSums(tmp[3:ncol(tmp)] == 1)/colSums(tmp[3:ncol(tmp)] != "NA")
# Get the number of individuals with data
ind.nomissing[i,] <- colSums(tmp[3:ncol(tmp)] != "NA")
}
# Set the names of the matrices
row.names(q.freq) <- row.names(het.freq) <- row.names(ind.nomissing) <- names(Dat)
# Use StamPP's indexing
index2_a <- index1_a <- NULL
step <- 2
step2 <- 1
for(i in step:length(unique(Pops))){
index1_a <- c(index1_a, i:length(unique(Pops)))
index2_a <- c(index2_a, rep(step2, length(step:length(unique(Pops)))))
step=step+1
step2=step2+1
}
# Set r (number of pops)
r <- 2
nPop1 <- ind.nomissing[index1_a,]
nPop2 <- ind.nomissing[index2_a,]
q1 <- q.freq[index1_a,]
q2 <- q.freq[index2_a,]
h1 <- het.freq[index1_a,]
h2 <- het.freq[index2_a,]
### WC Fst
# Calculate nbar
n.bar <- (nPop1+nPop2)/r
nc <- (r*n.bar)-(((nPop1^2)+(nPop2^2)) / (r*n.bar))
p.bar <- ((nPop1*q1)/(r*n.bar)) + ((nPop2*q2)/(r*n.bar))
s.square <- ((nPop1*((q1-p.bar)^2))/n.bar) + ((nPop2*((q2-p.bar)^2))/n.bar)
h.bar <- ((nPop1*h1)/(r*n.bar)) + ((nPop2*h2)/(r*n.bar))
a <- (n.bar/nc) * (s.square - (1/(n.bar-1)) * ( (p.bar*(1-p.bar)) - (((r-1)/r)*s.square) - ((1/4)*h.bar) ))
b <- (n.bar/(n.bar-1)) * ( (p.bar*(1-p.bar)) - (((r-1)/r)*s.square) - (((2*n.bar-1)/(4*n.bar))*h.bar))
c <- (1/2)*h.bar
# a, b, and c can be infinite, we will set these values to NA
if(any(is.finite(a) == FALSE) | any(is.finite(b) == FALSE) | any(is.finite(c) == FALSE)){
a[which(is.infinite(a))] <- NA
b[which(is.infinite(b))] <- NA
c[which(is.infinite(c))] <- NA
}
if(ncol(q.freq)>1){ #if there is more than 1 locus in the genotype dataset
if(length(unique(Pops))>2){ #if there are greater than 2 populations, ie. greater than 1 pairwise comparision
fst <- rowSums(a, na.rm=TRUE) / (rowSums(a, na.rm=TRUE) + rowSums(b, na.rm=TRUE) + rowSums(c, na.rm=TRUE)) #Fst results
} else{ #if there is only 2 populations, ie. 1 pairwise comparision
fst <- sum(a, na.rm=TRUE) / (sum(a, na.rm=TRUE) + sum(b, na.rm=TRUE) + sum(c, na.rm=TRUE)) #Fst results
}
} else{ # if there is only 1 locus in the genotype dataset
fst <- a/(a+b+c) #Fst results
}
fstmat <- matrix(NA, nrow=length(unique(Pops)), ncol=length(unique(Pops)), dimnames=names(Dat))
fstmat[lower.tri(fstmat)]=fst
return(fstmat)
}
Fst_wc
Fst_wc <- Fst(Dat_perpop)
Fst <- function(Dat){
# Dat is the Dat_perpop object
# Create a couple of matrices to store data
ind.nomissing <- matrix(nrow = length(Dat), ncol = length(Dat[3:ncol(Dat[[1]])]))
q.freq <- matrix(nrow = length(Dat), ncol = length(Dat[3:ncol(Dat[[1]])]))
het.freq <- matrix(nrow = length(Dat), ncol = length(Dat[3:ncol(Dat[[1]])]))
# Calculate the alternate allele frequency and the frequency of heterozygotes per population per locus
for(i in 1:length(Dat)){
tmp <- Dat[[i]]
# Get frequency of alternate alleles
q.freq[i,] <- (((colSums(tmp[3:ncol(tmp)] == 2, na.rm = T))*2) + colSums(tmp[3:ncol(tmp)] == 1, na.rm = T))/(2*colSums(tmp[3:ncol(tmp)] != "NA"))
# Get number of heterozygotes in each population
het.freq[i,] <- colSums(tmp[3:ncol(tmp)] == 1)/colSums(tmp[3:ncol(tmp)] != "NA")
# Get the number of individuals with data
ind.nomissing[i,] <- colSums(tmp[3:ncol(tmp)] != "NA")
}
# Set the names of the matrices
row.names(q.freq) <- row.names(het.freq) <- row.names(ind.nomissing) <- names(Dat)
# Use StamPP's indexing
index2_a <- index1_a <- NULL
step <- 2
step2 <- 1
for(i in step:length(unique(Pops))){
index1_a <- c(index1_a, i:length(unique(Pops)))
index2_a <- c(index2_a, rep(step2, length(step:length(unique(Pops)))))
step=step+1
step2=step2+1
}
# Set r (number of pops)
r <- 2
nPop1 <- ind.nomissing[index1_a,]
nPop2 <- ind.nomissing[index2_a,]
q1 <- q.freq[index1_a,]
q2 <- q.freq[index2_a,]
h1 <- het.freq[index1_a,]
h2 <- het.freq[index2_a,]
### WC Fst
# Calculate nbar
n.bar <- (nPop1+nPop2)/r
nc <- (r*n.bar)-(((nPop1^2)+(nPop2^2)) / (r*n.bar))
p.bar <- ((nPop1*q1)/(r*n.bar)) + ((nPop2*q2)/(r*n.bar))
s.square <- ((nPop1*((q1-p.bar)^2))/n.bar) + ((nPop2*((q2-p.bar)^2))/n.bar)
h.bar <- ((nPop1*h1)/(r*n.bar)) + ((nPop2*h2)/(r*n.bar))
a <- (n.bar/nc) * (s.square - (1/(n.bar-1)) * ( (p.bar*(1-p.bar)) - (((r-1)/r)*s.square) - ((1/4)*h.bar) ))
b <- (n.bar/(n.bar-1)) * ( (p.bar*(1-p.bar)) - (((r-1)/r)*s.square) - (((2*n.bar-1)/(4*n.bar))*h.bar))
c <- (1/2)*h.bar
# a, b, and c can be infinite, we will set these values to NA
if(any(is.finite(a) == FALSE) | any(is.finite(b) == FALSE) | any(is.finite(c) == FALSE)){
a[which(is.infinite(a))] <- NA
b[which(is.infinite(b))] <- NA
c[which(is.infinite(c))] <- NA
}
if(ncol(q.freq)>1){ #if there is more than 1 locus in the genotype dataset
if(length(unique(Pops))>2){ #if there are greater than 2 populations, ie. greater than 1 pairwise comparision
fst <- rowSums(a, na.rm=TRUE) / (rowSums(a, na.rm=TRUE) + rowSums(b, na.rm=TRUE) + rowSums(c, na.rm=TRUE)) #Fst results
} else{ #if there is only 2 populations, ie. 1 pairwise comparision
fst <- sum(a, na.rm=TRUE) / (sum(a, na.rm=TRUE) + sum(b, na.rm=TRUE) + sum(c, na.rm=TRUE)) #Fst results
}
} else{ # if there is only 1 locus in the genotype dataset
fst <- a/(a+b+c) #Fst results
}
fstmat <- matrix(NA, nrow=length(unique(Pops)), ncol=length(unique(Pops)), dimnames=list(names(Dat), names(Dat))
fstmat[lower.tri(fstmat)]=fst
Fst <- function(Dat){
# Dat is the Dat_perpop object
# Create a couple of matrices to store data
ind.nomissing <- matrix(nrow = length(Dat), ncol = length(Dat[3:ncol(Dat[[1]])]))
q.freq <- matrix(nrow = length(Dat), ncol = length(Dat[3:ncol(Dat[[1]])]))
het.freq <- matrix(nrow = length(Dat), ncol = length(Dat[3:ncol(Dat[[1]])]))
# Calculate the alternate allele frequency and the frequency of heterozygotes per population per locus
for(i in 1:length(Dat)){
tmp <- Dat[[i]]
# Get frequency of alternate alleles
q.freq[i,] <- (((colSums(tmp[3:ncol(tmp)] == 2, na.rm = T))*2) + colSums(tmp[3:ncol(tmp)] == 1, na.rm = T))/(2*colSums(tmp[3:ncol(tmp)] != "NA"))
# Get number of heterozygotes in each population
het.freq[i,] <- colSums(tmp[3:ncol(tmp)] == 1)/colSums(tmp[3:ncol(tmp)] != "NA")
# Get the number of individuals with data
ind.nomissing[i,] <- colSums(tmp[3:ncol(tmp)] != "NA")
}
# Set the names of the matrices
row.names(q.freq) <- row.names(het.freq) <- row.names(ind.nomissing) <- names(Dat)
# Use StamPP's indexing
index2_a <- index1_a <- NULL
step <- 2
step2 <- 1
for(i in step:length(unique(Pops))){
index1_a <- c(index1_a, i:length(unique(Pops)))
index2_a <- c(index2_a, rep(step2, length(step:length(unique(Pops)))))
step=step+1
step2=step2+1
}
# Set r (number of pops)
r <- 2
nPop1 <- ind.nomissing[index1_a,]
nPop2 <- ind.nomissing[index2_a,]
q1 <- q.freq[index1_a,]
q2 <- q.freq[index2_a,]
h1 <- het.freq[index1_a,]
h2 <- het.freq[index2_a,]
### WC Fst
# Calculate nbar
n.bar <- (nPop1+nPop2)/r
nc <- (r*n.bar)-(((nPop1^2)+(nPop2^2)) / (r*n.bar))
p.bar <- ((nPop1*q1)/(r*n.bar)) + ((nPop2*q2)/(r*n.bar))
s.square <- ((nPop1*((q1-p.bar)^2))/n.bar) + ((nPop2*((q2-p.bar)^2))/n.bar)
h.bar <- ((nPop1*h1)/(r*n.bar)) + ((nPop2*h2)/(r*n.bar))
a <- (n.bar/nc) * (s.square - (1/(n.bar-1)) * ( (p.bar*(1-p.bar)) - (((r-1)/r)*s.square) - ((1/4)*h.bar) ))
b <- (n.bar/(n.bar-1)) * ( (p.bar*(1-p.bar)) - (((r-1)/r)*s.square) - (((2*n.bar-1)/(4*n.bar))*h.bar))
c <- (1/2)*h.bar
# a, b, and c can be infinite, we will set these values to NA
if(any(is.finite(a) == FALSE) | any(is.finite(b) == FALSE) | any(is.finite(c) == FALSE)){
a[which(is.infinite(a))] <- NA
b[which(is.infinite(b))] <- NA
c[which(is.infinite(c))] <- NA
}
if(ncol(q.freq)>1){ #if there is more than 1 locus in the genotype dataset
if(length(unique(Pops))>2){ #if there are greater than 2 populations, ie. greater than 1 pairwise comparision
fst <- rowSums(a, na.rm=TRUE) / (rowSums(a, na.rm=TRUE) + rowSums(b, na.rm=TRUE) + rowSums(c, na.rm=TRUE)) #Fst results
} else{ #if there is only 2 populations, ie. 1 pairwise comparision
fst <- sum(a, na.rm=TRUE) / (sum(a, na.rm=TRUE) + sum(b, na.rm=TRUE) + sum(c, na.rm=TRUE)) #Fst results
}
} else{ # if there is only 1 locus in the genotype dataset
fst <- a/(a+b+c) #Fst results
}
fstmat <- matrix(NA, nrow=length(unique(Pops)), ncol=length(unique(Pops)), dimnames=list(names(Dat), names(Dat)))
fstmat[lower.tri(fstmat)]=fst
return(fstmat)
}
Fst_wc <- Fst(Dat_perpop)
View(Fst_wc)
Test_fst <- StAMPP::stamppFst(Glight, nboots = 1)
View(Test_fst)
View(Fst_wc)
Test_fst <- StAMPP::stamppFst(Glight, nboots = 0)
View(Test_fst)
document()
build_site()
pkgdown::build_site()
check()
check()
check()
