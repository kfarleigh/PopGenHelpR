Lat_Min <- min(Div_mat$Lat) - Lat_buffer
Lat_Max <- max(Div_mat$Lat) + Lat_buffer
Long_Min <- min(Div_mat$Long) - Long_buffer
Long_Max <- max(Div_mat$Long) + Long_buffer
col <- c('#4575b4','#ffffbf','#d73027')
Breaks <- summary(Div_mat[,1])
Breaks <- as.numeric(Breaks[1:5])
base_map + ggplot2::coord_sf(xlim = c(Long_Min, Long_Max),  ylim = c(Lat_Min, Lat_Max)) +
ggplot2::geom_point(data = Div_mat, ggplot2::aes(x = Long, y = Lat, color = stat), shape = 19, size = 3) +
ggplot2::scale_color_gradient2(low = col[1], mid = col[2], high = col[3], midpoint = mean(Div_mat[,1]), breaks = Breaks) +
ggplot2::theme(panel.grid=ggplot2::element_blank(), legend.position = "right") +
ggplot2::xlab('Longitude') + ggplot2::ylab('Latitude')
rlang::last_error()
rlang::last_trace()
base_map + ggplot2::coord_sf(xlim = c(Long_Min, Long_Max),  ylim = c(Lat_Min, Lat_Max)) +
ggplot2::geom_point(data = Div_mat, ggplot2::aes(x = Long, y = Lat, color = Div_mat[,1]), shape = 19, size = 3) +
ggplot2::scale_color_gradient2(low = col[1], mid = col[2], high = col[3], midpoint = mean(Div_mat[,1]), breaks = Breaks) +
ggplot2::theme(panel.grid=ggplot2::element_blank(), legend.position = "right") +
ggplot2::xlab('Longitude') + ggplot2::ylab('Latitude')
View(Het_dat)
colnames(Div_mat)[4:5] <- c('Long', 'Lat')
base_map + ggplot2::coord_sf(xlim = c(Long_Min, Long_Max),  ylim = c(Lat_Min, Lat_Max)) +
ggplot2::geom_point(data = Div_mat, ggplot2::aes(x = Long, y = Lat, color = Div_mat[,1]), shape = 19, size = 3) +
ggplot2::scale_color_gradient2(low = col[1], mid = col[2], high = col[3], midpoint = mean(Div_mat[,1]), breaks = Breaks) +
ggplot2::theme(panel.grid=ggplot2::element_blank(), legend.position = "right") +
ggplot2::xlab('Longitude') + ggplot2::ylab('Latitude')
base_map + ggplot2::coord_sf(xlim = c(Long_Min, Long_Max),  ylim = c(Lat_Min, Lat_Max)) +
ggplot2::geom_point(data = Div_mat, ggplot2::aes(x = Long, y = Lat, color = statistic), shape = 19, size = 3) +
ggplot2::scale_color_gradient2(low = col[1], mid = col[2], high = col[3], midpoint = mean(Div_mat[,1]), breaks = Breaks) +
ggplot2::theme(panel.grid=ggplot2::element_blank(), legend.position = "right") +
ggplot2::xlab('Longitude') + ggplot2::ylab('Latitude')
base_map + ggplot2::coord_sf(xlim = c(Long_Min, Long_Max),  ylim = c(Lat_Min, Lat_Max)) +
ggplot2::geom_point(data = Div_mat, ggplot2::aes(x = Long, y = Lat, color = stat), shape = 19, size = 3) +
ggplot2::scale_color_gradient2(low = col[1], mid = col[2], high = col[3], midpoint = mean(Div_mat[,1]), breaks = Breaks) +
ggplot2::theme(panel.grid=ggplot2::element_blank(), legend.position = "right") +
ggplot2::xlab('Longitude') + ggplot2::ylab('Latitude')
base_map + ggplot2::coord_sf(xlim = c(Long_Min, Long_Max),  ylim = c(Lat_Min, Lat_Max)) +
ggplot2::geom_point(data = Div_mat, ggplot2::aes(x = Long, y = Lat, color = Heterozygosity), shape = 19, size = 3) +
ggplot2::scale_color_gradient2(low = col[1], mid = col[2], high = col[3], midpoint = mean(Div_mat[,1]), breaks = Breaks) +
ggplot2::theme(panel.grid=ggplot2::element_blank(), legend.position = "right") +
ggplot2::xlab('Longitude') + ggplot2::ylab('Latitude')
Breaks <- round(Breaks,2)
base_map + ggplot2::coord_sf(xlim = c(Long_Min, Long_Max),  ylim = c(Lat_Min, Lat_Max)) +
ggplot2::geom_point(data = Div_mat, ggplot2::aes(x = Long, y = Lat, color = paste(statistic)), shape = 19, size = 3) +
ggplot2::scale_color_gradient2(low = col[1], mid = col[2], high = col[3], midpoint = mean(Div_mat[,1]), breaks = Breaks) +
ggplot2::theme(panel.grid=ggplot2::element_blank(), legend.position = "right") +
ggplot2::xlab('Longitude') + ggplot2::ylab('Latitude')
base_map + ggplot2::coord_sf(xlim = c(Long_Min, Long_Max),  ylim = c(Lat_Min, Lat_Max)) +
ggplot2::geom_point(data = Div_mat, ggplot2::aes(x = Long, y = Lat, color = paste(stat)), shape = 19, size = 3) +
ggplot2::scale_color_gradient2(low = col[1], mid = col[2], high = col[3], midpoint = mean(Div_mat[,1]), breaks = Breaks) +
ggplot2::theme(panel.grid=ggplot2::element_blank(), legend.position = "right") +
ggplot2::xlab('Longitude') + ggplot2::ylab('Latitude')
base_map + ggplot2::coord_sf(xlim = c(Long_Min, Long_Max),  ylim = c(Lat_Min, Lat_Max)) +
ggplot2::geom_point(data = Div_mat, ggplot2::aes(x = Long, y = Lat, color = Div_mat[,1]), shape = 19, size = 3) +
ggplot2::scale_color_gradient2(low = col[1], mid = col[2], high = col[3], midpoint = mean(Div_mat[,1]), breaks = Breaks) +
ggplot2::theme(panel.grid=ggplot2::element_blank(), legend.position = "right") +
ggplot2::xlab('Longitude') + ggplot2::ylab('Latitude')
base_map + ggplot2::coord_sf(xlim = c(Long_Min, Long_Max),  ylim = c(Lat_Min, Lat_Max)) +
ggplot2::geom_point(data = Div_mat, ggplot2::aes(x = Long, y = Lat, color = Div_mat[,1]), shape = 19, size = 3) +
ggplot2::scale_color_gradient2(low = col[1], mid = col[2], high = col[3], midpoint = mean(Div_mat[,1]), breaks = Breaks) +
ggplot2::theme(panel.grid=ggplot2::element_blank(), legend.position = "right", legend.title = statistic) +
ggplot2::xlab('Longitude') + ggplot2::ylab('Latitude')
base_map + ggplot2::coord_sf(xlim = c(Long_Min, Long_Max),  ylim = c(Lat_Min, Lat_Max)) +
ggplot2::geom_point(data = Div_mat, ggplot2::aes(x = Long, y = Lat, color = Div_mat[,1]), shape = 19, size = 3) +
ggplot2::scale_color_gradient2(low = col[1], mid = col[2], high = col[3], midpoint = mean(Div_mat[,1]), breaks = Breaks) +
ggplot2::theme(panel.grid=ggplot2::element_blank(), legend.position = "right", legend.title = ggplot2::element_text(statistic)) +
ggplot2::xlab('Longitude') + ggplot2::ylab('Latitude')
base_map + ggplot2::coord_sf(xlim = c(Long_Min, Long_Max),  ylim = c(Lat_Min, Lat_Max)) +
ggplot2::geom_point(data = Div_mat, ggplot2::aes(x = Long, y = Lat, color = Div_mat[,1]), shape = 19, size = 3) +
ggplot2::scale_color_gradient2(low = col[1], mid = col[2], high = col[3], midpoint = mean(Div_mat[,1]), breaks = Breaks) +
ggplot2::theme(panel.grid=ggplot2::element_blank(), legend.position = "right") + ggplot2::guide_legend(statistic) +
ggplot2::xlab('Longitude') + ggplot2::ylab('Latitude')
base_map + ggplot2::coord_sf(xlim = c(Long_Min, Long_Max),  ylim = c(Lat_Min, Lat_Max)) +
ggplot2::geom_point(data = Div_mat, ggplot2::aes(x = Long, y = Lat, color = Div_mat[,1]), shape = 19, size = 3) +
ggplot2::scale_color_gradient2(low = col[1], mid = col[2], high = col[3], midpoint = mean(Div_mat[,1]), breaks = Breaks) +
ggplot2::theme(panel.grid=ggplot2::element_blank(), legend.position = "right") + ggplot2::guides(color = guide_legend(statistic)) +
ggplot2::xlab('Longitude') + ggplot2::ylab('Latitude')
base_map + ggplot2::coord_sf(xlim = c(Long_Min, Long_Max),  ylim = c(Lat_Min, Lat_Max)) +
ggplot2::geom_point(data = Div_mat, ggplot2::aes(x = Long, y = Lat, color = Div_mat[,1]), shape = 19, size = 3) +
ggplot2::scale_color_gradient2(low = col[1], mid = col[2], high = col[3], midpoint = mean(Div_mat[,1]), breaks = Breaks) +
ggplot2::theme(panel.grid=ggplot2::element_blank(), legend.position = "right") + ggplot2::guides(color = ggplot2::guide_legend(statistic)) +
ggplot2::xlab('Longitude') + ggplot2::ylab('Latitude')
base_map + ggplot2::coord_sf(xlim = c(Long_Min, Long_Max),  ylim = c(Lat_Min, Lat_Max)) +
ggplot2::geom_point(data = Div_mat, ggplot2::aes(x = Long, y = Lat, color = Div_mat[,1]), shape = 19, size = 3) +
ggplot2::scale_color_gradient2(low = col[1], mid = col[2], high = col[3], midpoint = mean(Div_mat[,1]), breaks = Breaks, name = statistic) +
ggplot2::theme(panel.grid=ggplot2::element_blank(), legend.position = "right")  + ggplot2::xlab('Longitude') + ggplot2::ylab('Latitude')
sp::coordinates(Locs) <- c('Long', 'Lat')
Locs <- Div_mat[,4:5]
sp::coordinates(Locs) <- c('Long', 'Lat')
grd <- as.data.frame(sp::spsample(Locs,'regular', n=100000))
names(grd) <- c("X", "Y")
sp::coordinates(grd) <- c("X", "Y")
sp::gridded(grd)     <- TRUE  # Create SpatialPixel object
sp::fullgrid(grd)    <- TRUE  # Create SpatialGrid object
P.idw <- gstat::idw(Div_mat[,1] ~ 1, Locs, newdata=grd, idp=2.0)
r   <- raster::raster(P.idw)
R_pts <- raster::rasterToPoints(r, spatial = TRUE)
R_df <- data.frame(R_pts)
colnames(R_df)[1] <- z
colnames(R_df)[1] <- 'z'
ras_map <-  ggplot2::ggplot() + ggplot2::geom_sf(data = world, fill = 'grey99') +
ggplot2::geom_raster(data = R_df, ggplot2::aes(x = x, y= y, fill = z)) +
ggplot2::scale_fill_gradientn(colors = col, name = statistic)
for(i in 1:length(countries)) {
ras_map <- ras_map + ggplot2::geom_sf(data = Country_borders[[i]], fill = "NA")
}
ras_map +
ggplot2::coord_sf(xlim = c(Long_Min, Long_Max),  ylim = c(Lat_Min, Lat_Max)) +
ggplot2::geom_point(data = Div_mat, ggplot2::aes(x = Long, y = Lat), size = 3, shape = 21, fill = 'gray', color = "black") +
ggplot2::xlab("Longitude") + ggplot2::ylab ("Latitude") +
ggplot2::theme(panel.background = ggplot2::element_rect(color = "lightgray"), panel.grid = ggplot2::element_blank(),
axis.line = ggplot2::element_blank())
View(Het_dat)
colnames(Het_dat) <- colnames(Div_mat)
use_data(Het_dat)
use_data(Het_dat, overwrite = TRUE)
document()
check()
document()
check()
document()
check()
document()
check()
library(devtools)
use_vignette("PopGenHelpR_vignette")
# Load the package
library(PopGenHelpR)
data("Fst_dat")
data("Fst_dat")
data("Het_dat")
data("Q_dat")
data("Het_dat")
data("Q_dat")
Qmat <- Q_dat[[1]]
Loc <- Q_dat[[2]]
Test_all <- Plot_ancestry(anc.mat = Qmat, pops = Loc, K = 5,
plot.type = 'all', col = c('red', 'orange', 'pink', 'purple', 'blue'), countries = c("united states of america", "mexico"), Lat_buffer = 1, Long_buffer = 1)
load_all()
Test_all <- Plot_ancestry(anc.mat = Qmat, pops = Loc, K = 5,
plot.type = 'all', col = c('red', 'orange', 'pink', 'purple', 'blue'), countries = c("united states of america", "mexico"), Lat_buffer = 1, Long_buffer = 1)
Test_all$`Individual Map`
Test_all$`Population Map`
Fst <- Fst_dat[[1]]
Loc <- Fst_dat[[2]]
# Plot the heatmap
Fst_hmap <- Dif_Stats_Map(dat = Fst, pops = Loc, neighbors = 2,
countries = c('united states of america', 'mexico'),
col = c('#fd8d3c','#fc4e2a','#e31a1c','#bd0026','#800026'),
Lat_buffer = 1, Long_buffer = 1)
Fstat_hmap <- Pairwise_heatmap(dat = Fst, statistic = 'FST')
Fstat_hmap
Fst_map <- Dif_Stats_Map(dat = Fst, pops = Loc, neighbors = 1,
countries = c('united states of america', 'mexico'),
col = c('#fd8d3c','#fc4e2a','#e31a1c','#bd0026','#800026'),
Lat_buffer = 1, Long_buffer = 1)
Fst_map
Fst_map <- Dif_Stats_Map(dat = Fst, pops = Loc, neighbors = 1,
countries = c('united states of america', 'mexico'),
col = c('#fd8d3c','#fc4e2a','#e31a1c','#bd0026','#800026'),
Lat_buffer = 1, Long_buffer = 1)
Fst_map2 <- Dif_Stats_Map(dat = Fst, pops = Loc, neighbors = c('East_West', 'East_South', 'South_West'), countries = c('united states of america', 'mexico'),
col = c('#fd8d3c','#fc4e2a','#e31a1c','#bd0026','#800026'),
Lat_buffer = 1, Long_buffer = 1)
Fst_map2$`Differentiation Map`
Div_map <- Div_Stats_Map(dat = Het_dat, plot.type = 'point',
statistic = "Heterozygosity", countries = c('united states of america', 'mexico'), Lat_buffer = 1, Long_buffer = 1, prefix = 'Test_het')
Div_map$`Heterozygosity Map`
Div_map <- Div_Stats_Map(dat = Het_dat, plot.type = 'point',
statistic = "Heterozygosity", col = c('blue', 'orange', 'red'), countries = c('united states of america', 'mexico'), Lat_buffer = 1, Long_buffer = 1, prefix = 'Test_het')
Div_map$`Heterozygosity Map`
install()
browseVignettes("vignettes/PopGenHelpR_vignette.Rmd")
document()
check()
devtools::check_win_release()
use_pkgdown_github_pages()
use_pkgdown()
build_site()
use_pkgdown()
build_site()
build_site()
.Last.error.trace
build_site()
build_site()
document()
build_site()
build_site()
build_site()
build_site()
build_site()
build_site()
document()
build_site()
build_site()
check()
build_site()
build_manual()
devtools::install_github("kfarleigh/PopGenHelpR")
unload("PopGenHelpR")
devtools::install_github("kfarleigh/PopGenHelpR")
library(PopGenHelpR)
?Div_stats
build_site()
build_site()
build_site()
devtools::install_github("ropenscilabs/travis")
library(pkgdown)
buld_home()
build_home()
usethis::use_github_action_check_standard()
build_home()
build_home()
build_home()
build_home()
build_home()
build_home()
build_home()
build_home()
build_home()
build_home()
build_home()
build_home()
build_home()
sethis::use_github_action("check-standard")
usethis::use_github_action("check-standard")
usethis::use_github_action("check-standard")
usethis::use_github_action("check-standard")
build_home()
build_home()
build_home()
build_site()
build_site()
build_site()
build_site()
build_home()
build_home()
build_home()
build_home()
pkgdown::preview_page('404.html')
build_home()
build_site()
library(pkgdown)
library(devtools)
document()
build_site()
document()
build_site()
detach("package:pkgdown", unload = TRUE)
install.packages("pkgdown")
library(pkgdown)
use_github_action("pkgdown")
build_si
build_site()
install.packages("pkgdown")
install.packages("pkgdown")
library(pkgdown)
build_site_github_pages()
build_site_github_pages()
library(devtools)
Test <- 'Test.geno'
Test_vcf <- 'Test.vcf'
tools::file_ext(Test)
tools::file_ext(Test_vcf)
tools::file_ext(Test_vcf)
tools::file_ext(Test_vcf) == 'vc'
tools::file_ext(Test_vcf) == 'vcf'
data("HornedLizard_VCF")
Gen <- vcfR::vcfR2genind(HornedLizard_VCF)
adegenet::ploidy(Genind)
adegenet::ploidy(Gen)
adegenet::ploidy(Gen) <- 2
adegenet::ploidy(Gen)
adegenet::ploidy(Gen) <- 1
adegenet::ploidy(Gen)
adegenet::ploidy(Gen) <- 2
adegenet::ploidy(Gen)
rownamesGen@tab
rownames(Gen@tab)
data("HornedLizard_Pop")
Genind <- Gen
identical(rownames(Genind@tab), P[,1])
identical(rownames(Genind@tab), HornedLizard_Pop[,1])
any(rownames(Genind@tab) != P[,1])
P <- HornedLizard_Pop
any(rownames(Genind@tab) != P[,1])
paste(rownames(Genind@tab)[!(rownames(Genind@tab) != P[,1])], collapse = ' '))
paste(rownames(Genind@tab)[!(rownames(Genind@tab) != P[,1])], collapse = ' ')
paste(rownames(Genind@tab)[(!(rownames(Genind@tab) != P[,1])], collapse = ' ')
paste(rownames(Genind@tab)[rownames(Genind@tab) != P[,1]], collapse = ' ')
paste(rownames(Genind@tab)[rownames(Genind@tab) == P[,1]], collapse = ' ')
paste(rownames(Genind@tab)[(rownames(Genind@tab) != P[,1])], collapse = ' ')
!is.null(Test)
is.null(Test)
# Make an genind object and convert to format for heterozygosity calculations
Hstat <- hierfstat::genind2hierfstat(Genind)
Genind$pop <- as.factor(P$Population)
# Make an genind object and convert to format for heterozygosity calculations
Hstat <- hierfstat::genind2hierfstat(Genind)
View(Hstat)
Genind@tab
Test <- Genind@tab
View(Test)
Dat <- Genind@tab
View(Dat)
gt <- extract.gt(HornedLizard_VCF)
gt <- vcfR::extract.gt(HornedLizard_VCF)
View(gt)
gt[gt == "0/0"] <- 0
gt[gt == "0/1" | gt == "1/0"] <- 1
gt[gt == "01/1"] <- 2
gt2 <- vcfR::extract.gt(HornedLizard_VCF)
View(gt2)
View(gt)
gt[gt == "1/1"] <- 2
View(Dat)
Dat <- t(as.numeric(gt))
View(Dat)
Dat <- as.numeric(gt)
Dat <- as.numeric(as.data.frame(gt))
Dat <- as.matrix.data.frame(gt)
View(Dat)
Dat <- as.matrix(gt)
Dat <- as.numeric(as.matrix(gt))
Dat <- as.data.frame(as.matrix(gt))
View(Dat)
Dat <- t(as.data.frame(as.matrix(gt)))
Dat <- sapply(Dat, as.numeric)
Dat <- t(as.data.frame(as.matrix(gt)))
Dat <- as.data.frame(sapply(Dat, as.numeric))
Dat <- t(as.data.frame(as.matrix(gt)))
View(Dat)
Dat <- t(as.matrix(gt))
Dat <- as.data.frame(t(as.matrix(gt)))
View(Dat)
Dat <- as.data.frame(sapply(Dat, as.numeric))
View(Dat)
Dat <- as.data.frame(t(as.matrix(gt)))
Dat <- sapply(Dat, as.numeric)
Dat <- as.data.frame(t(as.matrix(gt)))
# Preserve individual names
Inds <- rownames(Dat)
Dat <- sapply(Dat, as.numeric)
P <- as.factor(P$Population)
Dat <- cbind(Inds, P, Dat)
P <- HornedLizard_Pop
View(P)
P <- P$Population
Dat <- cbind(Inds, P, Dat)
Dat <- as.data.frame(t(as.matrix(gt)))
# Preserve individual names
Inds <- rownames(Dat)
Dat <- sapply(Dat, as.numeric)
Dat <- cbind(Inds, P, Dat)
View(Dat)
View(Dat)
paste(Dat[,1][(Dat[,1] != P[,1])], collapse = ' '))
paste(Dat[,1][(Dat[,1] != P[,1])], collapse = ' ')
P <- HornedLizard_Pop
paste(Dat[,1][(Dat[,1] != P[,1])], collapse = ' ')
paste(Dat[,1][(Dat[,1] == P[,1])], collapse = ' ')
if(any(Dat[,1] != P[,1])){
warning("Sample names in the VCF and Population file may not be in the same order or samples are missing,
The sample(s) in question are: ",
print(paste(Dat[,1][(Dat[,1] != P[,1])], collapse = ' ')))  }
if(any(Dat[,1] != P[,1])){
warning("Sample names in the VCF and Population file may not be in the same order or samples are missing,
The sample(s) in question are: ",
print(paste(Dat[,1][(Dat[,1] == P[,1])], collapse = ' ')))  }
if(any(Dat[,1] == P[,1])){
warning("Sample names in the VCF and Population file may not be in the same order or samples are missing,
The sample(s) in question are: ",
print(paste(Dat[,1][(Dat[,1] == P[,1])], collapse = ' ')))  }
count(Dat[3:ncol(Dat)] == 1)/nrow(Dat)
#######################################
##### Heterozygosity calculations #####
#######################################
Het <- colSUms(Dat[3:ncol(Dat)] == 1)/nrow(Dat)
#######################################
##### Heterozygosity calculations #####
#######################################
Het <- colSums(Dat[3:ncol(Dat)] == 1)/nrow(Dat)
colSums(Dat[,3] == 1)
View(Dat)
Dat[,3:ncol(Dat)] <- sapply(Dat[,3:ncol(Dat)], as.numeric)
colSums(Dat[,3] == 1)
colSums(Dat[3])
Dat[,3:ncol(Dat)] <- sapply(Dat[,3:ncol(Dat)], as.numeric)
View(Dat)
Dat <- as.data.frame(t(as.matrix(gt)))
# Preserve individual names
Inds <- rownames(Dat)
Dat <- sapply(Dat, as.numeric)
Dat <- cbind(Inds, P, Dat)
View(Dat)
Dat <- as.data.frame(t(as.matrix(gt)))
# Preserve individual names
Inds <- rownames(Dat)
Dat <- sapply(Dat, as.numeric)
Dat <- cbind(Inds, P$Population, Dat)
Dat[,3:ncol(Dat)] <- sapply(Dat[,3:ncol(Dat)], as.numeric)
Dat[,3:ncol(Dat)] <- apply(Dat[,3:ncol(Dat)], 2, as.numeric)
Dat[,3:ncol(Dat)] <- apply(Dat[3:ncol(Dat)], 2, as.numeric)
Dat[,3:ncol(Dat)] <- apply(Dat[3:ncol(Dat)], 1, as.numeric)
Dat[3:ncol(Dat)] <- apply(Dat[3:ncol(Dat)], 1, as.numeric)
Dat[3:ncol(Dat)] <- apply(Dat[3:ncol(Dat)], 2, as.numeric)
Dat[,3:ncol(Dat)] <- mapply(Dat[,3:ncol(Dat)], 2, as.numeric)
Dat[,3:ncol(Dat)] <- mapply(Dat[,3:ncol(Dat)], as.numeric)
Dat[s3:ncol(Dat)] <- sapply(Dat[3:ncol(Dat)], as.numeric)
Dat[3:ncol(Dat)] <- sapply(Dat[3:ncol(Dat)], as.numeric)
Dat <- as.data.frame(t(as.matrix(gt)))
# Preserve individual names
Inds <- rownames(Dat)
Dat <- sapply(Dat, as.numeric)
Dat <- cbind(Inds, P$Population, Dat)
Dat[3:ncol(Dat)] <- sapply(Dat[3:ncol(Dat)], as.numeric)
View(Dat)
Dat <- as.data.frame(t(as.matrix(gt)))
# Preserve individual names
Inds <- rownames(Dat)
Dat <- sapply(Dat, as.numeric)
Dat <- cbind(Inds, P$Population, Dat)
Dat[,3:ncol(Dat)] <- sapply(Dat[,3:ncol(Dat)], as.numeric)
Dat[,3:ncol(Dat)] <- sapply(Dat[3:ncol(Dat)], as.numeric)
Dat <- as.data.frame(t(as.matrix(gt)))
# Preserve individual names
Inds <- rownames(Dat)
Dat <- sapply(Dat, as.numeric)
Dat <- cbind.data.frame(Inds, P$Population, Dat)
colSums(Dat[3] == 1)
colSums(Dat[3] != 1)
table(Dat[,3])
colSums(Dat[3:ncol(Dat)] != 1)/nrow(Dat)
#######################################
##### Heterozygosity calculations #####
#######################################
# Find homozygotes
Het <- 1-(colSums(Dat[3:ncol(Dat)] != 1)/nrow(Dat))
Het
ObsHet_perloc <- 1-(colSums(Dat[3:ncol(Dat)] != 1)/nrow(Dat))
ObsHet_avg <- mean(ObsHet_perloc)
return(ObsHet_avg, ObsHet_perloc)}
Het <- function(Dat){
ObsHet_perloc <- 1-(colSums(Dat[3:ncol(Dat)] != 1)/nrow(Dat))
ObsHet_avg <- mean(ObsHet_perloc)
return(ObsHet_avg, ObsHet_perloc)
}
unique(P$Population)
for(i in unique(P$Population)){
Dat_perpop[[i]] <- Dat[which(Dat[,2] == i),]
}
# Break into list with populations for each element
Dat_perpop <- list()
for(i in unique(P$Population)){
Dat_perpop[[i]] <- Dat[which(Dat[,2] == i),]
}
View(Dat_perpop)
table(Dat$`P$Population`)
ObsHet_res  <- lapply(Dat_perpop, ObsHet)
#######################################
##### Heterozygosity calculations #####
#######################################
# Find observed heterozygosity (1-homozygosity)
ObsHet <- function(Dat){
ObsHet_perloc <- 1-(colSums(Dat[3:ncol(Dat)] != 1)/nrow(Dat))
ObsHet_avg <- mean(ObsHet_perloc)
return(ObsHet_avg, ObsHet_perloc)
}
ObsHet_res  <- lapply(Dat_perpop, ObsHet)
#######################################
##### Heterozygosity calculations #####
#######################################
# Find observed heterozygosity (1-homozygosity)
ObsHet <- function(Dat){
ObsHet_perloc <- 1-(colSums(Dat[3:ncol(Dat)] != 1)/nrow(Dat))
ObsHet_avg <- mean(ObsHet_perloc)
return(ObsHet_perloc)
}
ObsHet_res  <- lapply(Dat_perpop, ObsHet)
View(ObsHet_res)
ObsHet_res_perloc  <- lapply(Dat_perpop, ObsHet)
Obs_Het_res_avg <- lapply(ObsHet_res_perloc, mean)
View(Obs_Het_res_avg)
Hstat <- hierfstat::genind2hierfstat(Genind)
BS <- basic.stat(Hstat)
BS <- hierfstats::basic.stats(Hstat)
BS <- hierfstat::::basic.stats(Hstat)
BS <- hierfstat::basic.stats(Hstat)
View(BS)
BS$Ho
BS$overall
colMeans(BS$Ho)
p <- (colSums(Dat[3:ncol(Dat)]== 0)*2) + colSums(Dat[3:ncol(Dat)]== 1)/nrow(Dat)
q <- (colSums(Dat[3:ncol(Dat)]== 2)*2) + colSums(Dat[3:ncol(Dat)]== 1)/nrow(Dat)
p <- (colSums(Dat[3:ncol(Dat)]== 0)*2) + colSums(Dat[3:ncol(Dat)]== 1)/(nrow(Dat)*2)
q <- (colSums(Dat[3:ncol(Dat)]== 2)*2) + colSums(Dat[3:ncol(Dat)]== 1)/(nrow(Dat)*2)
p <- ((colSums(Dat[3:ncol(Dat)]== 0)*2) + colSums(Dat[3:ncol(Dat)]== 1))/(nrow(Dat)*2)
q <- ((colSums(Dat[3:ncol(Dat)]== 2)*2) + colSums(Dat[3:ncol(Dat)]== 1))/(nrow(Dat)*2)
table(Dat[,3])
He <- 1-(p^2)-(q^2)
ExpHet_res_perloc  <- lapply(Dat_perpop, ExpHe)
ExpHe <- function(Dat){
p <- ((colSums(Dat[3:ncol(Dat)]== 0)*2) + colSums(Dat[3:ncol(Dat)]== 1))/(nrow(Dat)*2)
q <- ((colSums(Dat[3:ncol(Dat)]== 2)*2) + colSums(Dat[3:ncol(Dat)]== 1))/(nrow(Dat)*2)
He_perloc <- 1-(p^2)-(q^2)
return(He_perloc)
}
ExpHet_res_perloc  <- lapply(Dat_perpop, ExpHe)
View(ExpHet_res_perloc)
View(Dat)
ExpHet_res_avg  <- lapply(ExpHet_res_perloc, mean)
View(ExpHet_res_avg)
